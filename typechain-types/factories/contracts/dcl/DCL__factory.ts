/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { DCL, DCLInterface } from "../../../contracts/dcl/DCL";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "updateOperator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060bd80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80639d40b85014602d575b600080fd5b60536038366004606f565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600060208284031215608057600080fd5b503591905056fea2646970667358221220107e42f2c8a1482b5fdfecfdf99049d259ce0deeda8a86c7800a791e23f6ae0864736f6c634300081c0033";

type DCLConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DCLConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DCL__factory extends ContractFactory {
  constructor(...args: DCLConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DCL & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DCL__factory {
    return super.connect(runner) as DCL__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DCLInterface {
    return new Interface(_abi) as DCLInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DCL {
    return new Contract(address, _abi, runner) as unknown as DCL;
  }
}
