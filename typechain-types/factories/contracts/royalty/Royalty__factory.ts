/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Royalty,
  RoyaltyInterface,
} from "../../../contracts/royalty/Royalty";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "ClaimRoyaltyAdmin",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "ClaimRoyaltyBalance",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "SetBeneficiary",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "SetRoyaltyFee",
    type: "event",
  },
  {
    inputs: [],
    name: "claimRoyaltyAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBeneficiary",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRoyaltyFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "royaltyAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "beneficiary_",
        type: "address",
      },
    ],
    name: "setBeneficiary",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fee_",
        type: "uint256",
      },
    ],
    name: "setRoyaltyFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tempAdmin_",
        type: "address",
      },
    ],
    name: "setTempRoyaltyAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tempRoyaltyAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506104a28061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636ece56b31161005b5780636ece56b3146100e7578063820bdcdc146100fa578063894e851f1461010b578063c72437261461011e57600080fd5b80631c31f7101461008d5780631f1aea3a146100a25780633e4086e5146100aa578063565a2e2c146100bd575b600080fd5b6100a061009b36600461042f565b610131565b005b6100a0610207565b6100a06100b8366004610453565b6102b2565b6001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6003546100ca906001600160a01b031681565b6000546040519081526020016100de565b6002546100ca906001600160a01b031681565b6100a061012c36600461042f565b610379565b6002546001600160a01b0316331461017c5760405162461bcd60e51b815260206004820152600960248201526837b7363ca0b236b4b760b91b60448201526064015b60405180910390fd5b6001600160a01b038116158015906101a257506001546001600160a01b03828116911614155b6101ab57600080fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040805133815260208101929092527f8a0149b2f3ddf2c9ee85738165131d82babbb938f749321d59f75750afa7f4e691015b60405180910390a150565b6003546001600160a01b031633146102585760405162461bcd60e51b81526020600482015260146024820152733737ba103a32b6b82937bcb0b63a3ca0b236b4b760611b6044820152606401610173565b60038054600280546001600160a01b0383166001600160a01b0319918216179091551690556040513381527f0314d3865404a6a594e66b7f1922326048dad3985f6fad5069fd4bc22e3fbdcd9060200160405180910390a1565b6002546001600160a01b031633146102f85760405162461bcd60e51b815260206004820152600960248201526837b7363ca0b236b4b760b91b6044820152606401610173565b61271081111561033e5760405162461bcd60e51b815260206004820152601160248201527019995948195e18d959591cc80c4c1c18dd607a1b6044820152606401610173565b600081905560408051338152602081018390527f2c94a29baa8bee7919326700203e3124421ec6498cdc7be4868a1a76fb56b03e91016101fc565b6002546001600160a01b031633146103c65760405162461bcd60e51b815260206004820152601060248201526f3737ba103937bcb0b63a3ca0b236b4b760811b6044820152606401610173565b6001600160a01b038116158015906103ec57506002546001600160a01b03828116911614155b6103f557600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116811461042c57600080fd5b50565b60006020828403121561044157600080fd5b813561044c81610417565b9392505050565b60006020828403121561046557600080fd5b503591905056fea264697066735822122026572546e96de607a8b227394ec0b941e437cf8ff5bd00547784ab7da545cafe64736f6c634300081c0033";

type RoyaltyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RoyaltyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Royalty__factory extends ContractFactory {
  constructor(...args: RoyaltyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Royalty & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Royalty__factory {
    return super.connect(runner) as Royalty__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RoyaltyInterface {
    return new Interface(_abi) as RoyaltyInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Royalty {
    return new Contract(address, _abi, runner) as unknown as Royalty;
  }
}
