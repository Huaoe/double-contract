/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DoNFTFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwner"
      | "admin"
      | "beacon"
      | "deployDoNFT"
      | "deployWrapNFT"
      | "getDoNFT"
      | "market"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "setAdmin"
      | "setBeaconAndMarket"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DeployDoNFT"
      | "DeployWrapERC721DualRole"
      | "NewAdmin"
      | "NewOwner"
      | "NewPendingOwner"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "beacon", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deployDoNFT",
    values: [
      string,
      string,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployWrapNFT",
    values: [string, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDoNFT",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeaconAndMarket",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beacon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployDoNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployWrapNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDoNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBeaconAndMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace DeployDoNFTEvent {
  export type InputTuple = [
    proxy: AddressLike,
    name: string,
    symbol: string,
    originalAddress: AddressLike,
    market: AddressLike,
    royaltyAdmin: AddressLike,
    gameKey: string
  ];
  export type OutputTuple = [
    proxy: string,
    name: string,
    symbol: string,
    originalAddress: string,
    market: string,
    royaltyAdmin: string,
    gameKey: string
  ];
  export interface OutputObject {
    proxy: string;
    name: string;
    symbol: string;
    originalAddress: string;
    market: string;
    royaltyAdmin: string;
    gameKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeployWrapERC721DualRoleEvent {
  export type InputTuple = [
    wrapNFT: AddressLike,
    name: string,
    symbol: string,
    originalAddress: AddressLike
  ];
  export type OutputTuple = [
    wrapNFT: string,
    name: string,
    symbol: string,
    originalAddress: string
  ];
  export interface OutputObject {
    wrapNFT: string;
    name: string;
    symbol: string;
    originalAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewOwnerEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingOwnerEvent {
  export type InputTuple = [
    oldPendingOwner: AddressLike,
    newPendingOwner: AddressLike
  ];
  export type OutputTuple = [oldPendingOwner: string, newPendingOwner: string];
  export interface OutputObject {
    oldPendingOwner: string;
    newPendingOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DoNFTFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DoNFTFactory;
  waitForDeployment(): Promise<this>;

  interface: DoNFTFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwner: TypedContractMethod<[], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  beacon: TypedContractMethod<[], [string], "view">;

  deployDoNFT: TypedContractMethod<
    [
      name: string,
      symbol: string,
      originalAddress: AddressLike,
      owner_: AddressLike,
      admin_: AddressLike,
      royaltyAdmin: AddressLike,
      gameKey: string
    ],
    [string],
    "nonpayable"
  >;

  deployWrapNFT: TypedContractMethod<
    [name: string, symbol: string, originalAddress: AddressLike],
    [string],
    "nonpayable"
  >;

  getDoNFT: TypedContractMethod<
    [nftAddress: AddressLike, gameKey: string],
    [string],
    "view"
  >;

  market: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  setBeaconAndMarket: TypedContractMethod<
    [beacon_: AddressLike, market_: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [_pendingOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwner"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "beacon"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deployDoNFT"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      originalAddress: AddressLike,
      owner_: AddressLike,
      admin_: AddressLike,
      royaltyAdmin: AddressLike,
      gameKey: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployWrapNFT"
  ): TypedContractMethod<
    [name: string, symbol: string, originalAddress: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDoNFT"
  ): TypedContractMethod<
    [nftAddress: AddressLike, gameKey: string],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "market"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBeaconAndMarket"
  ): TypedContractMethod<
    [beacon_: AddressLike, market_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_pendingOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DeployDoNFT"
  ): TypedContractEvent<
    DeployDoNFTEvent.InputTuple,
    DeployDoNFTEvent.OutputTuple,
    DeployDoNFTEvent.OutputObject
  >;
  getEvent(
    key: "DeployWrapERC721DualRole"
  ): TypedContractEvent<
    DeployWrapERC721DualRoleEvent.InputTuple,
    DeployWrapERC721DualRoleEvent.OutputTuple,
    DeployWrapERC721DualRoleEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewOwner"
  ): TypedContractEvent<
    NewOwnerEvent.InputTuple,
    NewOwnerEvent.OutputTuple,
    NewOwnerEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingOwner"
  ): TypedContractEvent<
    NewPendingOwnerEvent.InputTuple,
    NewPendingOwnerEvent.OutputTuple,
    NewPendingOwnerEvent.OutputObject
  >;

  filters: {
    "DeployDoNFT(address,string,string,address,address,address,string)": TypedContractEvent<
      DeployDoNFTEvent.InputTuple,
      DeployDoNFTEvent.OutputTuple,
      DeployDoNFTEvent.OutputObject
    >;
    DeployDoNFT: TypedContractEvent<
      DeployDoNFTEvent.InputTuple,
      DeployDoNFTEvent.OutputTuple,
      DeployDoNFTEvent.OutputObject
    >;

    "DeployWrapERC721DualRole(address,string,string,address)": TypedContractEvent<
      DeployWrapERC721DualRoleEvent.InputTuple,
      DeployWrapERC721DualRoleEvent.OutputTuple,
      DeployWrapERC721DualRoleEvent.OutputObject
    >;
    DeployWrapERC721DualRole: TypedContractEvent<
      DeployWrapERC721DualRoleEvent.InputTuple,
      DeployWrapERC721DualRoleEvent.OutputTuple,
      DeployWrapERC721DualRoleEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewOwner(address,address)": TypedContractEvent<
      NewOwnerEvent.InputTuple,
      NewOwnerEvent.OutputTuple,
      NewOwnerEvent.OutputObject
    >;
    NewOwner: TypedContractEvent<
      NewOwnerEvent.InputTuple,
      NewOwnerEvent.OutputTuple,
      NewOwnerEvent.OutputObject
    >;

    "NewPendingOwner(address,address)": TypedContractEvent<
      NewPendingOwnerEvent.InputTuple,
      NewPendingOwnerEvent.OutputTuple,
      NewPendingOwnerEvent.OutputObject
    >;
    NewPendingOwner: TypedContractEvent<
      NewPendingOwnerEvent.InputTuple,
      NewPendingOwnerEvent.OutputTuple,
      NewPendingOwnerEvent.OutputObject
    >;
  };
}
