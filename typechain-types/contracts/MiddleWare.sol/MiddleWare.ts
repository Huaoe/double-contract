/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MiddleWare {
  export type DoNftMarketInfoStruct = {
    originalNftId: BigNumberish;
    orderPricePerDay: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    orderCreateTime: BigNumberish;
    orderMinDuration: BigNumberish;
    orderMaxEndTime: BigNumberish;
    orderFee: BigNumberish;
    orderType: BigNumberish;
    orderIsValid: boolean;
    originalNftAddress: AddressLike;
    owner: AddressLike;
    user: AddressLike;
    orderPrivateRenter: AddressLike;
    orderPaymentToken: AddressLike;
  };

  export type DoNftMarketInfoStructOutput = [
    originalNftId: bigint,
    orderPricePerDay: bigint,
    startTime: bigint,
    endTime: bigint,
    orderCreateTime: bigint,
    orderMinDuration: bigint,
    orderMaxEndTime: bigint,
    orderFee: bigint,
    orderType: bigint,
    orderIsValid: boolean,
    originalNftAddress: string,
    owner: string,
    user: string,
    orderPrivateRenter: string,
    orderPaymentToken: string
  ] & {
    originalNftId: bigint;
    orderPricePerDay: bigint;
    startTime: bigint;
    endTime: bigint;
    orderCreateTime: bigint;
    orderMinDuration: bigint;
    orderMaxEndTime: bigint;
    orderFee: bigint;
    orderType: bigint;
    orderIsValid: boolean;
    originalNftAddress: string;
    owner: string;
    user: string;
    orderPrivateRenter: string;
    orderPaymentToken: string;
  };
}

export interface MiddleWareInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchGetDoNftIdByONftId"
      | "batchIsApprovedForAll"
      | "getDoNftMarketInfo"
      | "getNftOwner"
      | "getNftOwnerAndTokenURI"
      | "getNftOwnerAndUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchGetDoNftIdByONftId",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchIsApprovedForAll",
    values: [AddressLike, AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDoNftMarketInfo",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftOwner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftOwnerAndTokenURI",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftOwnerAndUser",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchGetDoNftIdByONftId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchIsApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDoNftMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftOwnerAndTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftOwnerAndUser",
    data: BytesLike
  ): Result;
}

export interface MiddleWare extends BaseContract {
  connect(runner?: ContractRunner | null): MiddleWare;
  waitForDeployment(): Promise<this>;

  interface: MiddleWareInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchGetDoNftIdByONftId: TypedContractMethod<
    [doNftAddressArray: AddressLike[], oNftIdArray: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  batchIsApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operators: AddressLike[], erc721Array: AddressLike[]],
    [boolean[]],
    "view"
  >;

  getDoNftMarketInfo: TypedContractMethod<
    [nftAddr: AddressLike, nftId: BigNumberish, marketAddr: AddressLike],
    [MiddleWare.DoNftMarketInfoStructOutput],
    "view"
  >;

  getNftOwner: TypedContractMethod<
    [nftAddr: AddressLike, nftId: BigNumberish],
    [string],
    "view"
  >;

  getNftOwnerAndTokenURI: TypedContractMethod<
    [nftAddr: AddressLike, nftId: BigNumberish],
    [[string, string] & { owner: string; uri: string }],
    "view"
  >;

  getNftOwnerAndUser: TypedContractMethod<
    [
      originalNftAddr: AddressLike,
      orginalNftId: BigNumberish,
      doNftAddr: AddressLike
    ],
    [[string, string] & { owner: string; user: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchGetDoNftIdByONftId"
  ): TypedContractMethod<
    [doNftAddressArray: AddressLike[], oNftIdArray: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchIsApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operators: AddressLike[], erc721Array: AddressLike[]],
    [boolean[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDoNftMarketInfo"
  ): TypedContractMethod<
    [nftAddr: AddressLike, nftId: BigNumberish, marketAddr: AddressLike],
    [MiddleWare.DoNftMarketInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNftOwner"
  ): TypedContractMethod<
    [nftAddr: AddressLike, nftId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNftOwnerAndTokenURI"
  ): TypedContractMethod<
    [nftAddr: AddressLike, nftId: BigNumberish],
    [[string, string] & { owner: string; uri: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNftOwnerAndUser"
  ): TypedContractMethod<
    [
      originalNftAddr: AddressLike,
      orginalNftId: BigNumberish,
      doNftAddr: AddressLike
    ],
    [[string, string] & { owner: string; user: string }],
    "view"
  >;

  filters: {};
}
