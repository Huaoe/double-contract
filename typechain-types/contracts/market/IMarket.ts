/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IMarket {
  export type LendingStruct = {
    lender: AddressLike;
    nftAddress: AddressLike;
    nftId: BigNumberish;
    maxEndTime: BigNumberish;
    minDuration: BigNumberish;
    createTime: BigNumberish;
    nonce: BigNumberish;
    orderType: BigNumberish;
    paymentType: BigNumberish;
  };

  export type LendingStructOutput = [
    lender: string,
    nftAddress: string,
    nftId: bigint,
    maxEndTime: bigint,
    minDuration: bigint,
    createTime: bigint,
    nonce: bigint,
    orderType: bigint,
    paymentType: bigint
  ] & {
    lender: string;
    nftAddress: string;
    nftId: bigint;
    maxEndTime: bigint;
    minDuration: bigint;
    createTime: bigint;
    nonce: bigint;
    orderType: bigint;
    paymentType: bigint;
  };

  export type PaymentNormalStruct = {
    token: AddressLike;
    pricePerDay: BigNumberish;
  };

  export type PaymentNormalStructOutput = [
    token: string,
    pricePerDay: bigint
  ] & { token: string; pricePerDay: bigint };
}

export interface IMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelLendOrder"
      | "claimFee"
      | "claimRoyalty"
      | "createLendOrder"
      | "fulfillOrderNow"
      | "getFee"
      | "getLendOrder"
      | "getPaymentNormal"
      | "getRenterOfPrivateLendOrder"
      | "isLendOrderValid"
      | "mintAndCreateLendOrder"
      | "setFee"
      | "setMarketBeneficiary"
      | "setPause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CancelLendOrder"
      | "CreateLendOrder"
      | "FulfillOrder"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelLendOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFee",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRoyalty",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createLendOrder",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOrderNow",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLendOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentNormal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRenterOfPrivateLendOrder",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLendOrderValid",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndCreateLendOrder",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;

  decodeFunctionResult(
    functionFragment: "cancelLendOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLendOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOrderNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLendOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentNormal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRenterOfPrivateLendOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLendOrderValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndCreateLendOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMarketBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
}

export namespace CancelLendOrderEvent {
  export type InputTuple = [
    lender: AddressLike,
    nftAddress: AddressLike,
    nftId: BigNumberish
  ];
  export type OutputTuple = [lender: string, nftAddress: string, nftId: bigint];
  export interface OutputObject {
    lender: string;
    nftAddress: string;
    nftId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateLendOrderEvent {
  export type InputTuple = [
    lender: AddressLike,
    nftAddress: AddressLike,
    nftId: BigNumberish,
    maxEndTime: BigNumberish,
    minDuration: BigNumberish,
    pricePerDay: BigNumberish,
    paymentToken: AddressLike,
    renter: AddressLike,
    orderType: BigNumberish
  ];
  export type OutputTuple = [
    lender: string,
    nftAddress: string,
    nftId: bigint,
    maxEndTime: bigint,
    minDuration: bigint,
    pricePerDay: bigint,
    paymentToken: string,
    renter: string,
    orderType: bigint
  ];
  export interface OutputObject {
    lender: string;
    nftAddress: string;
    nftId: bigint;
    maxEndTime: bigint;
    minDuration: bigint;
    pricePerDay: bigint;
    paymentToken: string;
    renter: string;
    orderType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FulfillOrderEvent {
  export type InputTuple = [
    renter: AddressLike,
    lender: AddressLike,
    nftAddress: AddressLike,
    nftId: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    pricePerDay: BigNumberish,
    newId: BigNumberish,
    paymentToken: AddressLike
  ];
  export type OutputTuple = [
    renter: string,
    lender: string,
    nftAddress: string,
    nftId: bigint,
    startTime: bigint,
    endTime: bigint,
    pricePerDay: bigint,
    newId: bigint,
    paymentToken: string
  ];
  export interface OutputObject {
    renter: string;
    lender: string;
    nftAddress: string;
    nftId: bigint;
    startTime: bigint;
    endTime: bigint;
    pricePerDay: bigint;
    newId: bigint;
    paymentToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMarket extends BaseContract {
  connect(runner?: ContractRunner | null): IMarket;
  waitForDeployment(): Promise<this>;

  interface: IMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelLendOrder: TypedContractMethod<
    [nftAddress: AddressLike, nftId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimFee: TypedContractMethod<
    [paymentTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  claimRoyalty: TypedContractMethod<
    [nftAddress: AddressLike, paymentTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  createLendOrder: TypedContractMethod<
    [
      nftAddress: AddressLike,
      nftId: BigNumberish,
      maxEndTime: BigNumberish,
      minDuration: BigNumberish,
      pricePerDay: BigNumberish,
      paymentToken: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  fulfillOrderNow: TypedContractMethod<
    [
      nftAddress: AddressLike,
      nftId: BigNumberish,
      durationId: BigNumberish,
      duration: BigNumberish,
      user: AddressLike
    ],
    [bigint],
    "payable"
  >;

  getFee: TypedContractMethod<[], [bigint], "view">;

  getLendOrder: TypedContractMethod<
    [nftAddress: AddressLike, nftId: BigNumberish],
    [IMarket.LendingStructOutput],
    "view"
  >;

  getPaymentNormal: TypedContractMethod<
    [nftAddress: AddressLike, nftId: BigNumberish],
    [IMarket.PaymentNormalStructOutput],
    "view"
  >;

  getRenterOfPrivateLendOrder: TypedContractMethod<
    [nftAddress: AddressLike, nftId: BigNumberish],
    [string],
    "view"
  >;

  isLendOrderValid: TypedContractMethod<
    [nftAddress: AddressLike, nftId: BigNumberish],
    [boolean],
    "view"
  >;

  mintAndCreateLendOrder: TypedContractMethod<
    [
      resolverAddress: AddressLike,
      oNftId: BigNumberish,
      maxEndTime: BigNumberish,
      minDuration: BigNumberish,
      pricePerDay: BigNumberish,
      paymentToken: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;

  setMarketBeneficiary: TypedContractMethod<
    [beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  setPause: TypedContractMethod<[v: boolean], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelLendOrder"
  ): TypedContractMethod<
    [nftAddress: AddressLike, nftId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFee"
  ): TypedContractMethod<[paymentTokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRoyalty"
  ): TypedContractMethod<
    [nftAddress: AddressLike, paymentTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createLendOrder"
  ): TypedContractMethod<
    [
      nftAddress: AddressLike,
      nftId: BigNumberish,
      maxEndTime: BigNumberish,
      minDuration: BigNumberish,
      pricePerDay: BigNumberish,
      paymentToken: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fulfillOrderNow"
  ): TypedContractMethod<
    [
      nftAddress: AddressLike,
      nftId: BigNumberish,
      durationId: BigNumberish,
      duration: BigNumberish,
      user: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLendOrder"
  ): TypedContractMethod<
    [nftAddress: AddressLike, nftId: BigNumberish],
    [IMarket.LendingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPaymentNormal"
  ): TypedContractMethod<
    [nftAddress: AddressLike, nftId: BigNumberish],
    [IMarket.PaymentNormalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRenterOfPrivateLendOrder"
  ): TypedContractMethod<
    [nftAddress: AddressLike, nftId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLendOrderValid"
  ): TypedContractMethod<
    [nftAddress: AddressLike, nftId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintAndCreateLendOrder"
  ): TypedContractMethod<
    [
      resolverAddress: AddressLike,
      oNftId: BigNumberish,
      maxEndTime: BigNumberish,
      minDuration: BigNumberish,
      pricePerDay: BigNumberish,
      paymentToken: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketBeneficiary"
  ): TypedContractMethod<[beneficiary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPause"
  ): TypedContractMethod<[v: boolean], [void], "nonpayable">;

  getEvent(
    key: "CancelLendOrder"
  ): TypedContractEvent<
    CancelLendOrderEvent.InputTuple,
    CancelLendOrderEvent.OutputTuple,
    CancelLendOrderEvent.OutputObject
  >;
  getEvent(
    key: "CreateLendOrder"
  ): TypedContractEvent<
    CreateLendOrderEvent.InputTuple,
    CreateLendOrderEvent.OutputTuple,
    CreateLendOrderEvent.OutputObject
  >;
  getEvent(
    key: "FulfillOrder"
  ): TypedContractEvent<
    FulfillOrderEvent.InputTuple,
    FulfillOrderEvent.OutputTuple,
    FulfillOrderEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "CancelLendOrder(address,address,uint256)": TypedContractEvent<
      CancelLendOrderEvent.InputTuple,
      CancelLendOrderEvent.OutputTuple,
      CancelLendOrderEvent.OutputObject
    >;
    CancelLendOrder: TypedContractEvent<
      CancelLendOrderEvent.InputTuple,
      CancelLendOrderEvent.OutputTuple,
      CancelLendOrderEvent.OutputObject
    >;

    "CreateLendOrder(address,address,uint256,uint64,uint64,uint256,address,address,uint8)": TypedContractEvent<
      CreateLendOrderEvent.InputTuple,
      CreateLendOrderEvent.OutputTuple,
      CreateLendOrderEvent.OutputObject
    >;
    CreateLendOrder: TypedContractEvent<
      CreateLendOrderEvent.InputTuple,
      CreateLendOrderEvent.OutputTuple,
      CreateLendOrderEvent.OutputObject
    >;

    "FulfillOrder(address,address,address,uint256,uint64,uint64,uint256,uint256,address)": TypedContractEvent<
      FulfillOrderEvent.InputTuple,
      FulfillOrderEvent.OutputTuple,
      FulfillOrderEvent.OutputObject
    >;
    FulfillOrder: TypedContractEvent<
      FulfillOrderEvent.InputTuple,
      FulfillOrderEvent.OutputTuple,
      FulfillOrderEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
