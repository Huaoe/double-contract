/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TimeLockMultiSigWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAXIMUM_DELAY"
      | "MAX_OWNER_COUNT"
      | "MINIMUM_DELAY"
      | "VERSION"
      | "addOwner"
      | "batchConfirmTransaction"
      | "batchExecuteTransaction"
      | "changeRequirement"
      | "confirmTransaction"
      | "confirmations"
      | "delay"
      | "executeTransaction"
      | "getConfirmationCount"
      | "getConfirmations"
      | "getOwners"
      | "getTransactionCount"
      | "getTransactionIds"
      | "isConfirmed"
      | "isOwner"
      | "onERC721Received"
      | "owners"
      | "removeOwner"
      | "replaceOwner"
      | "required"
      | "revokeConfirmation"
      | "setDelay"
      | "submitTransaction"
      | "transactionCount"
      | "transactions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Confirmation"
      | "Deposit"
      | "Execution"
      | "ExecutionFailure"
      | "NewDelay"
      | "OwnerAddition"
      | "OwnerRemoval"
      | "RequirementChange"
      | "Revocation"
      | "Submission"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAXIMUM_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OWNER_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchConfirmTransaction",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchExecuteTransaction",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmationCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionIds",
    values: [BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceOwner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "required", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeConfirmation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAXIMUM_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OWNER_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchConfirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchExecuteTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "required", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
}

export namespace ConfirmationEvent {
  export type InputTuple = [sender: AddressLike, transactionId: BigNumberish];
  export type OutputTuple = [sender: string, transactionId: bigint];
  export interface OutputObject {
    sender: string;
    transactionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [sender: AddressLike, value: BigNumberish];
  export type OutputTuple = [sender: string, value: bigint];
  export interface OutputObject {
    sender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionEvent {
  export type InputTuple = [transactionId: BigNumberish];
  export type OutputTuple = [transactionId: bigint];
  export interface OutputObject {
    transactionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionFailureEvent {
  export type InputTuple = [transactionId: BigNumberish];
  export type OutputTuple = [transactionId: bigint];
  export interface OutputObject {
    transactionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewDelayEvent {
  export type InputTuple = [delay: BigNumberish];
  export type OutputTuple = [delay: bigint];
  export interface OutputObject {
    delay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerAdditionEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerRemovalEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequirementChangeEvent {
  export type InputTuple = [required: BigNumberish];
  export type OutputTuple = [required: bigint];
  export interface OutputObject {
    required: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevocationEvent {
  export type InputTuple = [sender: AddressLike, transactionId: BigNumberish];
  export type OutputTuple = [sender: string, transactionId: bigint];
  export interface OutputObject {
    sender: string;
    transactionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmissionEvent {
  export type InputTuple = [transactionId: BigNumberish];
  export type OutputTuple = [transactionId: bigint];
  export interface OutputObject {
    transactionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TimeLockMultiSigWallet extends BaseContract {
  connect(runner?: ContractRunner | null): TimeLockMultiSigWallet;
  waitForDeployment(): Promise<this>;

  interface: TimeLockMultiSigWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAXIMUM_DELAY: TypedContractMethod<[], [bigint], "view">;

  MAX_OWNER_COUNT: TypedContractMethod<[], [bigint], "view">;

  MINIMUM_DELAY: TypedContractMethod<[], [bigint], "view">;

  VERSION: TypedContractMethod<[], [bigint], "view">;

  addOwner: TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;

  batchConfirmTransaction: TypedContractMethod<
    [transactionIdArray: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchExecuteTransaction: TypedContractMethod<
    [transactionIdArray: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  changeRequirement: TypedContractMethod<
    [_required: BigNumberish],
    [void],
    "nonpayable"
  >;

  confirmTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  confirmations: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  delay: TypedContractMethod<[], [bigint], "view">;

  executeTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getConfirmationCount: TypedContractMethod<
    [transactionId: BigNumberish],
    [bigint],
    "view"
  >;

  getConfirmations: TypedContractMethod<
    [transactionId: BigNumberish],
    [string[]],
    "view"
  >;

  getOwners: TypedContractMethod<[], [string[]], "view">;

  getTransactionCount: TypedContractMethod<
    [pending: boolean, executed: boolean],
    [bigint],
    "view"
  >;

  getTransactionIds: TypedContractMethod<
    [from: BigNumberish, to: BigNumberish, pending: boolean, executed: boolean],
    [bigint[]],
    "view"
  >;

  isConfirmed: TypedContractMethod<
    [transactionId: BigNumberish],
    [boolean],
    "view"
  >;

  isOwner: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  owners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  removeOwner: TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;

  replaceOwner: TypedContractMethod<
    [owner: AddressLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  required: TypedContractMethod<[], [bigint], "view">;

  revokeConfirmation: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDelay: TypedContractMethod<[_delay: BigNumberish], [void], "nonpayable">;

  submitTransaction: TypedContractMethod<
    [destination: AddressLike, value: BigNumberish, data: BytesLike],
    [bigint],
    "nonpayable"
  >;

  transactionCount: TypedContractMethod<[], [bigint], "view">;

  transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        destination: string;
        value: bigint;
        data: string;
        executed: boolean;
        submitTime: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAXIMUM_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_OWNER_COUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addOwner"
  ): TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchConfirmTransaction"
  ): TypedContractMethod<
    [transactionIdArray: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchExecuteTransaction"
  ): TypedContractMethod<
    [transactionIdArray: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeRequirement"
  ): TypedContractMethod<[_required: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmations"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "delay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getConfirmationCount"
  ): TypedContractMethod<[transactionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getConfirmations"
  ): TypedContractMethod<[transactionId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTransactionCount"
  ): TypedContractMethod<
    [pending: boolean, executed: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransactionIds"
  ): TypedContractMethod<
    [from: BigNumberish, to: BigNumberish, pending: boolean, executed: boolean],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isConfirmed"
  ): TypedContractMethod<[transactionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "removeOwner"
  ): TypedContractMethod<[owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "replaceOwner"
  ): TypedContractMethod<
    [owner: AddressLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "required"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeConfirmation"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDelay"
  ): TypedContractMethod<[_delay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitTransaction"
  ): TypedContractMethod<
    [destination: AddressLike, value: BigNumberish, data: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transactionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        destination: string;
        value: bigint;
        data: string;
        executed: boolean;
        submitTime: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Confirmation"
  ): TypedContractEvent<
    ConfirmationEvent.InputTuple,
    ConfirmationEvent.OutputTuple,
    ConfirmationEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Execution"
  ): TypedContractEvent<
    ExecutionEvent.InputTuple,
    ExecutionEvent.OutputTuple,
    ExecutionEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionFailure"
  ): TypedContractEvent<
    ExecutionFailureEvent.InputTuple,
    ExecutionFailureEvent.OutputTuple,
    ExecutionFailureEvent.OutputObject
  >;
  getEvent(
    key: "NewDelay"
  ): TypedContractEvent<
    NewDelayEvent.InputTuple,
    NewDelayEvent.OutputTuple,
    NewDelayEvent.OutputObject
  >;
  getEvent(
    key: "OwnerAddition"
  ): TypedContractEvent<
    OwnerAdditionEvent.InputTuple,
    OwnerAdditionEvent.OutputTuple,
    OwnerAdditionEvent.OutputObject
  >;
  getEvent(
    key: "OwnerRemoval"
  ): TypedContractEvent<
    OwnerRemovalEvent.InputTuple,
    OwnerRemovalEvent.OutputTuple,
    OwnerRemovalEvent.OutputObject
  >;
  getEvent(
    key: "RequirementChange"
  ): TypedContractEvent<
    RequirementChangeEvent.InputTuple,
    RequirementChangeEvent.OutputTuple,
    RequirementChangeEvent.OutputObject
  >;
  getEvent(
    key: "Revocation"
  ): TypedContractEvent<
    RevocationEvent.InputTuple,
    RevocationEvent.OutputTuple,
    RevocationEvent.OutputObject
  >;
  getEvent(
    key: "Submission"
  ): TypedContractEvent<
    SubmissionEvent.InputTuple,
    SubmissionEvent.OutputTuple,
    SubmissionEvent.OutputObject
  >;

  filters: {
    "Confirmation(address,uint256)": TypedContractEvent<
      ConfirmationEvent.InputTuple,
      ConfirmationEvent.OutputTuple,
      ConfirmationEvent.OutputObject
    >;
    Confirmation: TypedContractEvent<
      ConfirmationEvent.InputTuple,
      ConfirmationEvent.OutputTuple,
      ConfirmationEvent.OutputObject
    >;

    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Execution(uint256)": TypedContractEvent<
      ExecutionEvent.InputTuple,
      ExecutionEvent.OutputTuple,
      ExecutionEvent.OutputObject
    >;
    Execution: TypedContractEvent<
      ExecutionEvent.InputTuple,
      ExecutionEvent.OutputTuple,
      ExecutionEvent.OutputObject
    >;

    "ExecutionFailure(uint256)": TypedContractEvent<
      ExecutionFailureEvent.InputTuple,
      ExecutionFailureEvent.OutputTuple,
      ExecutionFailureEvent.OutputObject
    >;
    ExecutionFailure: TypedContractEvent<
      ExecutionFailureEvent.InputTuple,
      ExecutionFailureEvent.OutputTuple,
      ExecutionFailureEvent.OutputObject
    >;

    "NewDelay(uint256)": TypedContractEvent<
      NewDelayEvent.InputTuple,
      NewDelayEvent.OutputTuple,
      NewDelayEvent.OutputObject
    >;
    NewDelay: TypedContractEvent<
      NewDelayEvent.InputTuple,
      NewDelayEvent.OutputTuple,
      NewDelayEvent.OutputObject
    >;

    "OwnerAddition(address)": TypedContractEvent<
      OwnerAdditionEvent.InputTuple,
      OwnerAdditionEvent.OutputTuple,
      OwnerAdditionEvent.OutputObject
    >;
    OwnerAddition: TypedContractEvent<
      OwnerAdditionEvent.InputTuple,
      OwnerAdditionEvent.OutputTuple,
      OwnerAdditionEvent.OutputObject
    >;

    "OwnerRemoval(address)": TypedContractEvent<
      OwnerRemovalEvent.InputTuple,
      OwnerRemovalEvent.OutputTuple,
      OwnerRemovalEvent.OutputObject
    >;
    OwnerRemoval: TypedContractEvent<
      OwnerRemovalEvent.InputTuple,
      OwnerRemovalEvent.OutputTuple,
      OwnerRemovalEvent.OutputObject
    >;

    "RequirementChange(uint256)": TypedContractEvent<
      RequirementChangeEvent.InputTuple,
      RequirementChangeEvent.OutputTuple,
      RequirementChangeEvent.OutputObject
    >;
    RequirementChange: TypedContractEvent<
      RequirementChangeEvent.InputTuple,
      RequirementChangeEvent.OutputTuple,
      RequirementChangeEvent.OutputObject
    >;

    "Revocation(address,uint256)": TypedContractEvent<
      RevocationEvent.InputTuple,
      RevocationEvent.OutputTuple,
      RevocationEvent.OutputObject
    >;
    Revocation: TypedContractEvent<
      RevocationEvent.InputTuple,
      RevocationEvent.OutputTuple,
      RevocationEvent.OutputObject
    >;

    "Submission(uint256)": TypedContractEvent<
      SubmissionEvent.InputTuple,
      SubmissionEvent.OutputTuple,
      SubmissionEvent.OutputObject
    >;
    Submission: TypedContractEvent<
      SubmissionEvent.InputTuple,
      SubmissionEvent.OutputTuple,
      SubmissionEvent.OutputObject
    >;
  };
}
