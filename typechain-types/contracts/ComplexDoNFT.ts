/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ComplexDoNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwner"
      | "admin"
      | "approve"
      | "balanceOf"
      | "checkIn"
      | "claimRoyaltyAdmin"
      | "concat"
      | "contains"
      | "couldRedeem"
      | "curDoid"
      | "curDurationId"
      | "exists"
      | "gc"
      | "getApproved"
      | "getBeneficiary"
      | "getDoNftInfo"
      | "getDuration"
      | "getDurationByIndex"
      | "getDurationIdList"
      | "getDurationListLength"
      | "getFingerprint"
      | "getMaxDuration"
      | "getNonce"
      | "getOriginalNftAddress"
      | "getOriginalNftId"
      | "getRoyaltyFee"
      | "getUser"
      | "getVNftId"
      | "initialize"
      | "isApprovedForAll"
      | "isVNft"
      | "isValidNow"
      | "market"
      | "maxDuration"
      | "mint"
      | "mintVNft"
      | "multicall"
      | "name"
      | "onERC721Received"
      | "owner"
      | "ownerOf"
      | "pendingOwner"
      | "redeem"
      | "renounceOwnership"
      | "royaltyAdmin"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setAdmin"
      | "setApprovalForAll"
      | "setBeneficiary"
      | "setIsOnlyNow"
      | "setMarket"
      | "setMaxDuration"
      | "setRoyaltyFee"
      | "setTempRoyaltyAdmin"
      | "supportsInterface"
      | "symbol"
      | "tempRoyaltyAdmin"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "CheckIn"
      | "ClaimRoyaltyAdmin"
      | "ClaimRoyaltyBalance"
      | "DurationBurn"
      | "DurationUpdate"
      | "Initialized"
      | "MetadataUpdate"
      | "NewAdmin"
      | "NewOwner"
      | "NewPendingOwner"
      | "Redeem"
      | "SetBeneficiary"
      | "SetRoyaltyFee"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIn",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRoyaltyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "concat",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contains",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "couldRedeem",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "curDoid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "curDurationId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gc",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDoNftInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDurationByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDurationIdList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDurationListLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFingerprint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOriginalNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOriginalNftId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVNftId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidNow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsOnlyNow",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTempRoyaltyAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tempRoyaltyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRoyaltyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "concat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "couldRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curDoid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "curDurationId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDoNftInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDurationByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDurationIdList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDurationListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFingerprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOriginalNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOriginalNftId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVNftId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isValidNow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintVNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsOnlyNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTempRoyaltyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tempRoyaltyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CheckInEvent {
  export type InputTuple = [
    opreator: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish,
    durationId: BigNumberish,
    oid: BigNumberish,
    expires: BigNumberish
  ];
  export type OutputTuple = [
    opreator: string,
    to: string,
    tokenId: bigint,
    durationId: bigint,
    oid: bigint,
    expires: bigint
  ];
  export interface OutputObject {
    opreator: string;
    to: string;
    tokenId: bigint;
    durationId: bigint;
    oid: bigint;
    expires: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRoyaltyAdminEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRoyaltyBalanceEvent {
  export type InputTuple = [operator: AddressLike, balance: BigNumberish];
  export type OutputTuple = [operator: string, balance: bigint];
  export interface OutputObject {
    operator: string;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DurationBurnEvent {
  export type InputTuple = [durationIdList: BigNumberish[]];
  export type OutputTuple = [durationIdList: bigint[]];
  export interface OutputObject {
    durationIdList: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DurationUpdateEvent {
  export type InputTuple = [
    durationId: BigNumberish,
    tokenId: BigNumberish,
    start: BigNumberish,
    end: BigNumberish
  ];
  export type OutputTuple = [
    durationId: bigint,
    tokenId: bigint,
    start: bigint,
    end: bigint
  ];
  export interface OutputObject {
    durationId: bigint;
    tokenId: bigint;
    start: bigint;
    end: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewOwnerEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingOwnerEvent {
  export type InputTuple = [
    oldPendingOwner: AddressLike,
    newPendingOwner: AddressLike
  ];
  export type OutputTuple = [oldPendingOwner: string, newPendingOwner: string];
  export interface OutputObject {
    oldPendingOwner: string;
    newPendingOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemEvent {
  export type InputTuple = [oid: BigNumberish, tokenId: BigNumberish];
  export type OutputTuple = [oid: bigint, tokenId: bigint];
  export interface OutputObject {
    oid: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBeneficiaryEvent {
  export type InputTuple = [operator: AddressLike, beneficiary: AddressLike];
  export type OutputTuple = [operator: string, beneficiary: string];
  export interface OutputObject {
    operator: string;
    beneficiary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRoyaltyFeeEvent {
  export type InputTuple = [operator: AddressLike, fee: BigNumberish];
  export type OutputTuple = [operator: string, fee: bigint];
  export interface OutputObject {
    operator: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ComplexDoNFT extends BaseContract {
  connect(runner?: ContractRunner | null): ComplexDoNFT;
  waitForDeployment(): Promise<this>;

  interface: ComplexDoNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwner: TypedContractMethod<[], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  checkIn: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish, durationId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimRoyaltyAdmin: TypedContractMethod<[], [void], "nonpayable">;

  concat: TypedContractMethod<
    [
      tokenId: BigNumberish,
      durationId: BigNumberish,
      targetTokenId: BigNumberish,
      targetDurationId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  contains: TypedContractMethod<
    [tokenId: BigNumberish, durationId: BigNumberish],
    [boolean],
    "view"
  >;

  couldRedeem: TypedContractMethod<
    [tokenId: BigNumberish, durationIds: BigNumberish[]],
    [boolean],
    "view"
  >;

  curDoid: TypedContractMethod<[], [bigint], "view">;

  curDurationId: TypedContractMethod<[], [bigint], "view">;

  exists: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  gc: TypedContractMethod<
    [tokenId: BigNumberish, durationIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getBeneficiary: TypedContractMethod<[], [string], "view">;

  getDoNftInfo: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [bigint, bigint[], bigint[], bigint[], bigint] & {
        oid: bigint;
        durationIds: bigint[];
        starts: bigint[];
        ends: bigint[];
        nonce: bigint;
      }
    ],
    "view"
  >;

  getDuration: TypedContractMethod<
    [durationId: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  getDurationByIndex: TypedContractMethod<
    [tokenId: BigNumberish, index: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        durationId: bigint;
        start: bigint;
        end: bigint;
      }
    ],
    "view"
  >;

  getDurationIdList: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getDurationListLength: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getFingerprint: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getMaxDuration: TypedContractMethod<[], [bigint], "view">;

  getNonce: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;

  getOriginalNftAddress: TypedContractMethod<[], [string], "view">;

  getOriginalNftId: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getRoyaltyFee: TypedContractMethod<[], [bigint], "view">;

  getUser: TypedContractMethod<[originalNftId: BigNumberish], [string], "view">;

  getVNftId: TypedContractMethod<
    [originalNftId: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      name_: string,
      symbol_: string,
      nftAddress_: AddressLike,
      market_: AddressLike,
      owner_: AddressLike,
      admin_: AddressLike,
      royaltyAdmin_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isVNft: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  isValidNow: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  market: TypedContractMethod<[], [string], "view">;

  maxDuration: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [
      tokenId: BigNumberish,
      durationId: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      to: AddressLike,
      user: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  mintVNft: TypedContractMethod<[oid: BigNumberish], [bigint], "nonpayable">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  name: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  redeem: TypedContractMethod<
    [tokenId: BigNumberish, durationIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  royaltyAdmin: TypedContractMethod<[], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBeneficiary: TypedContractMethod<
    [beneficiary_: AddressLike],
    [void],
    "nonpayable"
  >;

  setIsOnlyNow: TypedContractMethod<[v: boolean], [void], "nonpayable">;

  setMarket: TypedContractMethod<[_market: AddressLike], [void], "nonpayable">;

  setMaxDuration: TypedContractMethod<[v: BigNumberish], [void], "nonpayable">;

  setRoyaltyFee: TypedContractMethod<
    [fee_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTempRoyaltyAdmin: TypedContractMethod<
    [tempAdmin_: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tempRoyaltyAdmin: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [_pendingOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwner"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkIn"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish, durationId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRoyaltyAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "concat"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      durationId: BigNumberish,
      targetTokenId: BigNumberish,
      targetDurationId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contains"
  ): TypedContractMethod<
    [tokenId: BigNumberish, durationId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "couldRedeem"
  ): TypedContractMethod<
    [tokenId: BigNumberish, durationIds: BigNumberish[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "curDoid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "curDurationId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "gc"
  ): TypedContractMethod<
    [tokenId: BigNumberish, durationIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBeneficiary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDoNftInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [bigint, bigint[], bigint[], bigint[], bigint] & {
        oid: bigint;
        durationIds: bigint[];
        starts: bigint[];
        ends: bigint[];
        nonce: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDuration"
  ): TypedContractMethod<
    [durationId: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDurationByIndex"
  ): TypedContractMethod<
    [tokenId: BigNumberish, index: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        durationId: bigint;
        start: bigint;
        end: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDurationIdList"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getDurationListLength"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFingerprint"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getMaxDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOriginalNftAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOriginalNftId"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoyaltyFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<[originalNftId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getVNftId"
  ): TypedContractMethod<[originalNftId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      name_: string,
      symbol_: string,
      nftAddress_: AddressLike,
      market_: AddressLike,
      owner_: AddressLike,
      admin_: AddressLike,
      royaltyAdmin_: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVNft"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidNow"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "market"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      durationId: BigNumberish,
      start: BigNumberish,
      end: BigNumberish,
      to: AddressLike,
      user: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintVNft"
  ): TypedContractMethod<[oid: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [tokenId: BigNumberish, durationIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "royaltyAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBeneficiary"
  ): TypedContractMethod<[beneficiary_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsOnlyNow"
  ): TypedContractMethod<[v: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarket"
  ): TypedContractMethod<[_market: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxDuration"
  ): TypedContractMethod<[v: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRoyaltyFee"
  ): TypedContractMethod<[fee_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTempRoyaltyAdmin"
  ): TypedContractMethod<[tempAdmin_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tempRoyaltyAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_pendingOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "CheckIn"
  ): TypedContractEvent<
    CheckInEvent.InputTuple,
    CheckInEvent.OutputTuple,
    CheckInEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRoyaltyAdmin"
  ): TypedContractEvent<
    ClaimRoyaltyAdminEvent.InputTuple,
    ClaimRoyaltyAdminEvent.OutputTuple,
    ClaimRoyaltyAdminEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRoyaltyBalance"
  ): TypedContractEvent<
    ClaimRoyaltyBalanceEvent.InputTuple,
    ClaimRoyaltyBalanceEvent.OutputTuple,
    ClaimRoyaltyBalanceEvent.OutputObject
  >;
  getEvent(
    key: "DurationBurn"
  ): TypedContractEvent<
    DurationBurnEvent.InputTuple,
    DurationBurnEvent.OutputTuple,
    DurationBurnEvent.OutputObject
  >;
  getEvent(
    key: "DurationUpdate"
  ): TypedContractEvent<
    DurationUpdateEvent.InputTuple,
    DurationUpdateEvent.OutputTuple,
    DurationUpdateEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewOwner"
  ): TypedContractEvent<
    NewOwnerEvent.InputTuple,
    NewOwnerEvent.OutputTuple,
    NewOwnerEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingOwner"
  ): TypedContractEvent<
    NewPendingOwnerEvent.InputTuple,
    NewPendingOwnerEvent.OutputTuple,
    NewPendingOwnerEvent.OutputObject
  >;
  getEvent(
    key: "Redeem"
  ): TypedContractEvent<
    RedeemEvent.InputTuple,
    RedeemEvent.OutputTuple,
    RedeemEvent.OutputObject
  >;
  getEvent(
    key: "SetBeneficiary"
  ): TypedContractEvent<
    SetBeneficiaryEvent.InputTuple,
    SetBeneficiaryEvent.OutputTuple,
    SetBeneficiaryEvent.OutputObject
  >;
  getEvent(
    key: "SetRoyaltyFee"
  ): TypedContractEvent<
    SetRoyaltyFeeEvent.InputTuple,
    SetRoyaltyFeeEvent.OutputTuple,
    SetRoyaltyFeeEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "CheckIn(address,address,uint256,uint256,uint256,uint64)": TypedContractEvent<
      CheckInEvent.InputTuple,
      CheckInEvent.OutputTuple,
      CheckInEvent.OutputObject
    >;
    CheckIn: TypedContractEvent<
      CheckInEvent.InputTuple,
      CheckInEvent.OutputTuple,
      CheckInEvent.OutputObject
    >;

    "ClaimRoyaltyAdmin(address)": TypedContractEvent<
      ClaimRoyaltyAdminEvent.InputTuple,
      ClaimRoyaltyAdminEvent.OutputTuple,
      ClaimRoyaltyAdminEvent.OutputObject
    >;
    ClaimRoyaltyAdmin: TypedContractEvent<
      ClaimRoyaltyAdminEvent.InputTuple,
      ClaimRoyaltyAdminEvent.OutputTuple,
      ClaimRoyaltyAdminEvent.OutputObject
    >;

    "ClaimRoyaltyBalance(address,uint256)": TypedContractEvent<
      ClaimRoyaltyBalanceEvent.InputTuple,
      ClaimRoyaltyBalanceEvent.OutputTuple,
      ClaimRoyaltyBalanceEvent.OutputObject
    >;
    ClaimRoyaltyBalance: TypedContractEvent<
      ClaimRoyaltyBalanceEvent.InputTuple,
      ClaimRoyaltyBalanceEvent.OutputTuple,
      ClaimRoyaltyBalanceEvent.OutputObject
    >;

    "DurationBurn(uint256[])": TypedContractEvent<
      DurationBurnEvent.InputTuple,
      DurationBurnEvent.OutputTuple,
      DurationBurnEvent.OutputObject
    >;
    DurationBurn: TypedContractEvent<
      DurationBurnEvent.InputTuple,
      DurationBurnEvent.OutputTuple,
      DurationBurnEvent.OutputObject
    >;

    "DurationUpdate(uint256,uint256,uint64,uint64)": TypedContractEvent<
      DurationUpdateEvent.InputTuple,
      DurationUpdateEvent.OutputTuple,
      DurationUpdateEvent.OutputObject
    >;
    DurationUpdate: TypedContractEvent<
      DurationUpdateEvent.InputTuple,
      DurationUpdateEvent.OutputTuple,
      DurationUpdateEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewOwner(address,address)": TypedContractEvent<
      NewOwnerEvent.InputTuple,
      NewOwnerEvent.OutputTuple,
      NewOwnerEvent.OutputObject
    >;
    NewOwner: TypedContractEvent<
      NewOwnerEvent.InputTuple,
      NewOwnerEvent.OutputTuple,
      NewOwnerEvent.OutputObject
    >;

    "NewPendingOwner(address,address)": TypedContractEvent<
      NewPendingOwnerEvent.InputTuple,
      NewPendingOwnerEvent.OutputTuple,
      NewPendingOwnerEvent.OutputObject
    >;
    NewPendingOwner: TypedContractEvent<
      NewPendingOwnerEvent.InputTuple,
      NewPendingOwnerEvent.OutputTuple,
      NewPendingOwnerEvent.OutputObject
    >;

    "Redeem(uint256,uint256)": TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;
    Redeem: TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;

    "SetBeneficiary(address,address)": TypedContractEvent<
      SetBeneficiaryEvent.InputTuple,
      SetBeneficiaryEvent.OutputTuple,
      SetBeneficiaryEvent.OutputObject
    >;
    SetBeneficiary: TypedContractEvent<
      SetBeneficiaryEvent.InputTuple,
      SetBeneficiaryEvent.OutputTuple,
      SetBeneficiaryEvent.OutputObject
    >;

    "SetRoyaltyFee(address,uint256)": TypedContractEvent<
      SetRoyaltyFeeEvent.InputTuple,
      SetRoyaltyFeeEvent.OutputTuple,
      SetRoyaltyFeeEvent.OutputObject
    >;
    SetRoyaltyFee: TypedContractEvent<
      SetRoyaltyFeeEvent.InputTuple,
      SetRoyaltyFeeEvent.OutputTuple,
      SetRoyaltyFeeEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
