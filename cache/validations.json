{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin\\contracts\\interfaces\\IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin\\contracts\\proxy\\ERC1967\\ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "d8b659a6f22eab5b4d4399a0eda2c14ff74eff341904239399a8a70eae56bab7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin\\contracts\\proxy\\Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin\\contracts\\proxy\\beacon\\BeaconProxy.sol:23",
        "version": {
          "withMetadata": "cbebafa85b99a59724f9a623b3b4ba3faf6b8f4aac0efe2f3536f217cf8e6f8e",
          "withoutMetadata": "78c1a859c05852705dd5bf404c9ce155b35f3e74edd0379f0bc195a7d5b418e4",
          "linkedWithoutMetadata": "78c1a859c05852705dd5bf404c9ce155b35f3e74edd0379f0bc195a7d5b418e4"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin\\contracts\\proxy\\beacon\\BeaconProxy.sol:39"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_beacon",
            "src": "@openzeppelin\\contracts\\proxy\\beacon\\BeaconProxy.sol:25"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin\\contracts\\proxy\\beacon\\IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\utils\\ERC721Utils.sol:16",
        "version": {
          "withMetadata": "7b9bfa201489448d5e7407eb6453100d64bb7feab4875e8f5998d08292f57034",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:11",
        "version": {
          "withMetadata": "fb61dda68e7db4786b9723f7df7244eaebc3f3fee7bff01fcf5053e3c6bc7d6f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin\\contracts\\utils\\Errors.sol:14",
        "version": {
          "withMetadata": "f4274fbf3d6c2176ae1e148ca1fd3dfab68a3b73bfcb548e61464f49be6c8d86",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin\\contracts\\utils\\Panic.sol:26",
        "version": {
          "withMetadata": "18af38b215aa82e5b9e190077fe255402503dd79151eff9011a50d73506f48c6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin\\contracts\\utils\\StorageSlot.sol:34",
        "version": {
          "withMetadata": "0a220b1eaa74f4801b4218f9511ce9227040f319bc016a31b823b4f741e3f229",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:12",
        "version": {
          "withMetadata": "cbcb8686d4c6e626bbf29ebc6afbef97d3b8bd4409d899afaff5e95be2cef342",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:12",
        "version": {
          "withMetadata": "c1cc1915447ae3d859504c9c92a15b97cbe8e8c30a73f2be9357550d2d5166ca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeCast.sol:19",
        "version": {
          "withMetadata": "a7f1ca3b8aa423805776ae8f808db352566e4239432fa65596841d6263194dd0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SignedMath.sol:11",
        "version": {
          "withMetadata": "8f8d91cf5ee7bf61e273f61af3226f85a57f9f7d7a15676b74d5deda80d82371",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:41",
        "version": {
          "withMetadata": "3788d48ee882395847aaa0384ac7623f6d2c9c08b7c9813c12d14380fb1afcd9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/DoNFTFactory.sol:DoNFTFactory": {
        "src": "contracts\\DoNFTFactory.sol:14",
        "version": {
          "withMetadata": "fe2ad813645d97c16890f01b0749d052492d95e94f370475f7f0f586e5d2353f",
          "withoutMetadata": "739857a23ae71812c14bbe5d72bec007c6221417fc886d5304163bcc3c01ac1b",
          "linkedWithoutMetadata": "739857a23ae71812c14bbe5d72bec007c6221417fc886d5304163bcc3c01ac1b"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address,address,address)",
          "setBeaconAndMarket(address,address)",
          "deployDoNFT(string,string,address,address,address,address,string)",
          "deployWrapNFT(string,string,address)",
          "getDoNFT(address,string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_address))",
              "contract": "DoNFTFactory",
              "src": "contracts\\DoNFTFactory.sol:32"
            },
            {
              "label": "beacon",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "DoNFTFactory",
              "src": "contracts\\DoNFTFactory.sol:34"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "DoNFTFactory",
              "src": "contracts\\DoNFTFactory.sol:35"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "DoNFTFactory",
              "src": "contracts\\DoNFTFactory.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)86_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(OwnableStorage)14_storage": {
              "label": "struct OwnableUpgradeable.OwnableStorage",
              "members": [
                {
                  "label": "_owner",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_address))": {
              "label": "mapping(address => mapping(string => address))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_address)": {
              "label": "mapping(string => address)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:24",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/IBaseDoNFT.sol:IBaseDoNFT": {
        "src": "contracts\\IBaseDoNFT.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "mintVNft(uint256)",
          "mint(uint256,uint256,uint64,uint64,address,address)",
          "setMaxDuration(uint64)",
          "getMaxDuration()",
          "getDurationIdList(uint256)",
          "getDurationListLength(uint256)",
          "getDoNftInfo(uint256)",
          "getNonce(uint256)",
          "getDuration(uint256)",
          "getDurationByIndex(uint256,uint256)",
          "getVNftId(uint256)",
          "isVNft(uint256)",
          "isValidNow(uint256)",
          "getOriginalNftAddress()",
          "getOriginalNftId(uint256)",
          "checkIn(address,uint256,uint256)",
          "getUser(uint256)",
          "exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/IComplexDoNFT.sol:IComplexDoNFT": {
        "src": "contracts\\IComplexDoNFT.sol:7",
        "inherit": [
          "contracts/royalty/IRoyalty.sol:IRoyalty",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dualRoles/ERC4907.sol:ERC4907": {
        "src": "contracts\\dualRoles\\ERC4907.sol:7",
        "version": {
          "withMetadata": "b706784f2d5de17aea405ada33a759f5b8ecab5adace0eb1e16ab8eab9359793",
          "withoutMetadata": "f0256aa21030f4b2129b3b284ede0aa1f77ca3f82d8d77c5068db2b1cece5218",
          "linkedWithoutMetadata": "f0256aa21030f4b2129b3b284ede0aa1f77ca3f82d8d77c5068db2b1cece5218"
        },
        "inherit": [
          "contracts/dualRoles/IERC4907.sol:IERC4907",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setUser(uint256,address,uint64)",
          "userOf(uint256)",
          "userExpires(uint256)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC4907",
            "src": "contracts\\dualRoles\\ERC4907.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:34"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(UserInfo)7757_storage)",
              "contract": "ERC4907",
              "src": "contracts\\dualRoles\\ERC4907.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(UserInfo)7757_storage)": {
              "label": "mapping(uint256 => struct ERC4907.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(UserInfo)7757_storage": {
              "label": "struct ERC4907.UserInfo",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "expires",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dualRoles/IERC4907.sol:IERC4907": {
        "src": "contracts\\dualRoles\\IERC4907.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setUser(uint256,address,uint64)",
          "userOf(uint256)",
          "userExpires(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dualRoles/wrap/IWrapNFT.sol:IWrapNFT": {
        "src": "contracts\\dualRoles\\wrap\\IWrapNFT.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "originalAddress()",
          "stake(uint256)",
          "redeem(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dualRoles/wrap/WrapERC721DualRole.sol:WrapERC721DualRole": {
        "src": "contracts\\dualRoles\\wrap\\WrapERC721DualRole.sol:7",
        "version": {
          "withMetadata": "b3c1c21cecf9af1157918689dd385bad9f71e3b71f8f4e2c4e9b3f15afea9f3a",
          "withoutMetadata": "76fe1bd3c0c4a8c4f5522cfe782a3aceb89c225126ca0eaa219f05d4ffb986ab",
          "linkedWithoutMetadata": "76fe1bd3c0c4a8c4f5522cfe782a3aceb89c225126ca0eaa219f05d4ffb986ab"
        },
        "inherit": [
          "contracts/dualRoles/wrap/IWrapNFT.sol:IWrapNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "contracts/dualRoles/ERC4907.sol:ERC4907",
          "contracts/dualRoles/IERC4907.sol:IERC4907",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)",
          "originalAddress()",
          "stake(uint256)",
          "redeem(uint256)",
          "originalOwnerOf(uint256)",
          "tokenURI(uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrapERC721DualRole",
            "src": "contracts\\dualRoles\\wrap\\WrapERC721DualRole.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:34"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(UserInfo)7757_storage)",
              "contract": "ERC4907",
              "src": "contracts\\dualRoles\\ERC4907.sol:13"
            },
            {
              "label": "_originalAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "WrapERC721DualRole",
              "src": "contracts\\dualRoles\\wrap\\WrapERC721DualRole.sol:8"
            },
            {
              "label": "_doNFTAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "WrapERC721DualRole",
              "src": "contracts\\dualRoles\\wrap\\WrapERC721DualRole.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(UserInfo)7757_storage)": {
              "label": "mapping(uint256 => struct ERC4907.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(UserInfo)7757_storage": {
              "label": "struct ERC4907.UserInfo",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "expires",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/royalty/IRoyalty.sol:IRoyalty": {
        "src": "contracts\\royalty\\IRoyalty.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimRoyaltyAdmin()",
          "setBeneficiary(address payable)",
          "getBeneficiary()",
          "setRoyaltyFee(uint256)",
          "getRoyaltyFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\utils\\ERC721Utils.sol:16",
        "version": {
          "withMetadata": "7b9bfa201489448d5e7407eb6453100d64bb7feab4875e8f5998d08292f57034",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin\\contracts\\utils\\Panic.sol:26",
        "version": {
          "withMetadata": "18af38b215aa82e5b9e190077fe255402503dd79151eff9011a50d73506f48c6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:12",
        "version": {
          "withMetadata": "cbcb8686d4c6e626bbf29ebc6afbef97d3b8bd4409d899afaff5e95be2cef342",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:12",
        "version": {
          "withMetadata": "c1cc1915447ae3d859504c9c92a15b97cbe8e8c30a73f2be9357550d2d5166ca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeCast.sol:19",
        "version": {
          "withMetadata": "a7f1ca3b8aa423805776ae8f808db352566e4239432fa65596841d6263194dd0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SignedMath.sol:11",
        "version": {
          "withMetadata": "8f8d91cf5ee7bf61e273f61af3226f85a57f9f7d7a15676b74d5deda80d82371",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dualRoles/IERC4907.sol:IERC4907": {
        "src": "contracts\\dualRoles\\IERC4907.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setUser(uint256,address,uint64)",
          "userOf(uint256)",
          "userExpires(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockNFT.sol:MockNFT": {
        "src": "contracts\\mocks\\MockNFT.sol:7",
        "version": {
          "withMetadata": "05e7df26f2cb530b654dde54a372042bd49b7f0c51b4ece60999948ce459ba1d",
          "withoutMetadata": "ee7de5292c0831d6999499356ed3bc2148ece154442aeecea897a94257a23f52",
          "linkedWithoutMetadata": "ee7de5292c0831d6999499356ed3bc2148ece154442aeecea897a94257a23f52"
        },
        "inherit": [
          "contracts/dualRoles/IERC4907.sol:IERC4907",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setUser(uint256,address,uint64)",
          "userOf(uint256)",
          "userExpires(uint256)",
          "supportsInterface(bytes4)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockNFT",
            "src": "contracts\\mocks\\MockNFT.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:34"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(UserInfo)5350_storage)",
              "contract": "MockNFT",
              "src": "contracts\\mocks\\MockNFT.sol:9"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(UserInfo)5350_storage)": {
              "label": "mapping(uint256 => struct MockNFT.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(UserInfo)5350_storage": {
              "label": "struct MockNFT.UserInfo",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "expires",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\utils\\ERC721Utils.sol:16",
        "version": {
          "withMetadata": "7b9bfa201489448d5e7407eb6453100d64bb7feab4875e8f5998d08292f57034",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:11",
        "version": {
          "withMetadata": "fb61dda68e7db4786b9723f7df7244eaebc3f3fee7bff01fcf5053e3c6bc7d6f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin\\contracts\\utils\\Errors.sol:14",
        "version": {
          "withMetadata": "f4274fbf3d6c2176ae1e148ca1fd3dfab68a3b73bfcb548e61464f49be6c8d86",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin\\contracts\\utils\\Panic.sol:26",
        "version": {
          "withMetadata": "18af38b215aa82e5b9e190077fe255402503dd79151eff9011a50d73506f48c6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:12",
        "version": {
          "withMetadata": "cbcb8686d4c6e626bbf29ebc6afbef97d3b8bd4409d899afaff5e95be2cef342",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:12",
        "version": {
          "withMetadata": "c1cc1915447ae3d859504c9c92a15b97cbe8e8c30a73f2be9357550d2d5166ca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeCast.sol:19",
        "version": {
          "withMetadata": "a7f1ca3b8aa423805776ae8f808db352566e4239432fa65596841d6263194dd0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SignedMath.sol:11",
        "version": {
          "withMetadata": "8f8d91cf5ee7bf61e273f61af3226f85a57f9f7d7a15676b74d5deda80d82371",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:41",
        "version": {
          "withMetadata": "3788d48ee882395847aaa0384ac7623f6d2c9c08b7c9813c12d14380fb1afcd9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/BaseDoNFT.sol:BaseDoNFT": {
        "src": "contracts\\BaseDoNFT.sol:12",
        "inherit": [
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "setIsOnlyNow(bool)",
          "contains(uint256,uint256)",
          "getDurationIdList(uint256)",
          "getDuration(uint256)",
          "getDurationByIndex(uint256,uint256)",
          "isValidNow(uint256)",
          "getDurationListLength(uint256)",
          "getDoNftInfo(uint256)",
          "getNonce(uint256)",
          "mint(uint256,uint256,uint64,uint64,address,address)",
          "setMaxDuration(uint64)",
          "getMaxDuration()",
          "concat(uint256,uint256,uint256,uint256)",
          "checkIn(address,uint256,uint256)",
          "gc(uint256,uint256[])",
          "getFingerprint(uint256)",
          "isVNft(uint256)",
          "getOriginalNftAddress()",
          "getOriginalNftId(uint256)",
          "getVNftId(uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "supportsInterface(bytes4)",
          "exists(uint256)",
          "setMarket(address)",
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "oNftAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:20"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:21"
            },
            {
              "label": "curDoid",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:22"
            },
            {
              "label": "curDurationId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:23"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint64",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:24"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(DoNftInfo)10455_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:25"
            },
            {
              "label": "durationMapping",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(Duration)10447_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:26"
            },
            {
              "label": "oid2vid",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:27"
            },
            {
              "label": "isOnlyNow",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DoNftInfo)10455_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.DoNftInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Duration)10447_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.Duration)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(DoNftInfo)10455_storage": {
              "label": "struct IBaseDoNFT.DoNftInfo",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durationList",
                  "type": "t_struct(UintSet)7237_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Duration)10447_storage": {
              "label": "struct IBaseDoNFT.Duration",
              "members": [
                {
                  "label": "start",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "end",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)6765_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)7237_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)6765_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/CheckInMgr.sol:CheckInMgr": {
        "src": "contracts\\CheckInMgr.sol:9",
        "version": {
          "withMetadata": "b81eb1271fb41b39eaba16de1111f4ccf2db84a4eda53b81333636b3303eab3b",
          "withoutMetadata": "e16d6bd3c85b9b25c24468bcc4af2dd13a612e8c7d363eee10222c9926bdac4d",
          "linkedWithoutMetadata": "e16d6bd3c85b9b25c24468bcc4af2dd13a612e8c7d363eee10222c9926bdac4d"
        },
        "inherit": [
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [],
        "methods": [
          "resetExpiredTo(uint256[],address)",
          "isCheckInDataExpired(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "checkInMap",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(CheckInData)8968_storage)",
              "contract": "CheckInMgr",
              "src": "contracts\\CheckInMgr.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(CheckInData)8968_storage)": {
              "label": "mapping(uint256 => struct CheckInMgr.CheckInData)",
              "numberOfBytes": "32"
            },
            "t_struct(CheckInData)8968_storage": {
              "label": "struct CheckInMgr.CheckInData",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ComplexDoNFT.sol:ComplexDoNFT": {
        "src": "contracts\\ComplexDoNFT.sol:12",
        "version": {
          "withMetadata": "eaba985881770cbd26872f9e18bdcc5c785f242fa6b97ea919332879454da6e2",
          "withoutMetadata": "458759a0a818a2a2cffb598b3600890e68cfbdce755a2659038c677e55313878",
          "linkedWithoutMetadata": "458759a0a818a2a2cffb598b3600890e68cfbdce755a2659038c677e55313878"
        },
        "inherit": [
          "contracts/IComplexDoNFT.sol:IComplexDoNFT",
          "contracts/royalty/Royalty.sol:Royalty",
          "contracts/royalty/IRoyalty.sol:IRoyalty",
          "contracts/WrapDoNFT.sol:WrapDoNFT",
          "contracts/IWrapDoNFT.sol:IWrapDoNFT",
          "contracts/BaseDoNFT.sol:BaseDoNFT",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/DoubleSVG.sol:DoubleSVG"
        ],
        "methods": [
          "initialize(string,string,address,address,address,address,address)",
          "mintVNft(uint256)",
          "checkIn(address,uint256,uint256)",
          "getUser(uint256)",
          "redeem(uint256,uint256[])",
          "supportsInterface(bytes4)",
          "tokenURI(uint256)"
        ],
        "linkReferences": [
          {
            "src": "contracts/DoubleSVG.sol",
            "name": "DoubleSVG",
            "length": 20,
            "start": 9934,
            "placeholder": "__$996ce4ea27519c2de692a7755c14713365$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "DoubleSVG",
            "src": "contracts/DoubleSVG.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "oNftAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:20"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:21"
            },
            {
              "label": "curDoid",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:22"
            },
            {
              "label": "curDurationId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:23"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint64",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:24"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(DoNftInfo)10455_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:25"
            },
            {
              "label": "durationMapping",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(Duration)10447_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:26"
            },
            {
              "label": "oid2vid",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:27"
            },
            {
              "label": "isOnlyNow",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:28"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:9"
            },
            {
              "label": "beneficiary",
              "offset": 0,
              "slot": "13",
              "type": "t_address_payable",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:10"
            },
            {
              "label": "royaltyAdmin",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:11"
            },
            {
              "label": "tempRoyaltyAdmin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DoNftInfo)10455_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.DoNftInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Duration)10447_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.Duration)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(DoNftInfo)10455_storage": {
              "label": "struct IBaseDoNFT.DoNftInfo",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durationList",
                  "type": "t_struct(UintSet)7237_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Duration)10447_storage": {
              "label": "struct IBaseDoNFT.Duration",
              "members": [
                {
                  "label": "start",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "end",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)6765_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)7237_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)6765_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/DoubleSVG.sol:DoubleSVG": {
        "src": "contracts\\DoubleSVG.sol:5",
        "version": {
          "withMetadata": "11954708b329e2245355357c0c16691098edfaf1f97a7b70dc1755c5f57a3555",
          "withoutMetadata": "e8a11402f892062f2412984438929a9c24a0e9db78603fecb2a0fad0ad5b4df6",
          "linkedWithoutMetadata": "e8a11402f892062f2412984438929a9c24a0e9db78603fecb2a0fad0ad5b4df6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "genTokenURI(uint256,string,string,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/IBaseDoNFT.sol:IBaseDoNFT": {
        "src": "contracts\\IBaseDoNFT.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "mintVNft(uint256)",
          "mint(uint256,uint256,uint64,uint64,address,address)",
          "setMaxDuration(uint64)",
          "getMaxDuration()",
          "getDurationIdList(uint256)",
          "getDurationListLength(uint256)",
          "getDoNftInfo(uint256)",
          "getNonce(uint256)",
          "getDuration(uint256)",
          "getDurationByIndex(uint256,uint256)",
          "getVNftId(uint256)",
          "isVNft(uint256)",
          "isValidNow(uint256)",
          "getOriginalNftAddress()",
          "getOriginalNftId(uint256)",
          "checkIn(address,uint256,uint256)",
          "getUser(uint256)",
          "exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/IComplexDoNFT.sol:IComplexDoNFT": {
        "src": "contracts\\IComplexDoNFT.sol:7",
        "inherit": [
          "contracts/royalty/IRoyalty.sol:IRoyalty",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/IWrapDoNFT.sol:IWrapDoNFT": {
        "src": "contracts\\IWrapDoNFT.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "couldRedeem(uint256,uint256[])",
          "redeem(uint256,uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/OwnableContract.sol:OwnableContract": {
        "src": "contracts\\OwnableContract.sol:4",
        "version": {
          "withMetadata": "5b6637eb9bc969205a19bb5cc4cb64b4bbd83a3ea63efc05ec6dc5310bff5ef0",
          "withoutMetadata": "f8dc2750ec2665ffeb1a79071ed38abad3c84931c264f33608b3e4f418555c63",
          "linkedWithoutMetadata": "f8dc2750ec2665ffeb1a79071ed38abad3c84931c264f33608b3e4f418555c63"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "acceptOwner()",
          "setAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/VipDoNFT.sol:VipDoNFT": {
        "src": "contracts\\VipDoNFT.sol:8",
        "inherit": [
          "contracts/CheckInMgr.sol:CheckInMgr",
          "contracts/ComplexDoNFT.sol:ComplexDoNFT",
          "contracts/IComplexDoNFT.sol:IComplexDoNFT",
          "contracts/royalty/Royalty.sol:Royalty",
          "contracts/royalty/IRoyalty.sol:IRoyalty",
          "contracts/WrapDoNFT.sol:WrapDoNFT",
          "contracts/IWrapDoNFT.sol:IWrapDoNFT",
          "contracts/BaseDoNFT.sol:BaseDoNFT",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [],
        "methods": [
          "mintVNft(uint256)",
          "checkIn(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "oNftAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:20"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:21"
            },
            {
              "label": "curDoid",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:22"
            },
            {
              "label": "curDurationId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:23"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint64",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:24"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(DoNftInfo)10455_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:25"
            },
            {
              "label": "durationMapping",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(Duration)10447_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:26"
            },
            {
              "label": "oid2vid",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:27"
            },
            {
              "label": "isOnlyNow",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:28"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:9"
            },
            {
              "label": "beneficiary",
              "offset": 0,
              "slot": "13",
              "type": "t_address_payable",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:10"
            },
            {
              "label": "royaltyAdmin",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:11"
            },
            {
              "label": "tempRoyaltyAdmin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:12"
            },
            {
              "label": "checkInMap",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_uint256,t_struct(CheckInData)8968_storage)",
              "contract": "CheckInMgr",
              "src": "contracts\\CheckInMgr.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(CheckInData)8968_storage)": {
              "label": "mapping(uint256 => struct CheckInMgr.CheckInData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DoNftInfo)10455_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.DoNftInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Duration)10447_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.Duration)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(CheckInData)8968_storage": {
              "label": "struct CheckInMgr.CheckInData",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DoNftInfo)10455_storage": {
              "label": "struct IBaseDoNFT.DoNftInfo",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durationList",
                  "type": "t_struct(UintSet)7237_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Duration)10447_storage": {
              "label": "struct IBaseDoNFT.Duration",
              "members": [
                {
                  "label": "start",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "end",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)6765_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)7237_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)6765_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/WrapDoNFT.sol:WrapDoNFT": {
        "src": "contracts\\WrapDoNFT.sol:8",
        "inherit": [
          "contracts/IWrapDoNFT.sol:IWrapDoNFT",
          "contracts/BaseDoNFT.sol:BaseDoNFT",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "couldRedeem(uint256,uint256[])",
          "redeem(uint256,uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "oNftAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:20"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:21"
            },
            {
              "label": "curDoid",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:22"
            },
            {
              "label": "curDurationId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:23"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint64",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:24"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(DoNftInfo)10455_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:25"
            },
            {
              "label": "durationMapping",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(Duration)10447_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:26"
            },
            {
              "label": "oid2vid",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:27"
            },
            {
              "label": "isOnlyNow",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DoNftInfo)10455_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.DoNftInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Duration)10447_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.Duration)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(DoNftInfo)10455_storage": {
              "label": "struct IBaseDoNFT.DoNftInfo",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durationList",
                  "type": "t_struct(UintSet)7237_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Duration)10447_storage": {
              "label": "struct IBaseDoNFT.Duration",
              "members": [
                {
                  "label": "start",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "end",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)6765_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)7237_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)6765_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dcl/DCL.sol:DCL": {
        "src": "contracts\\dcl\\DCL.sol:4",
        "version": {
          "withMetadata": "c7243f45c0a8cdee85d79f26b1f24bbecf9e6bc2ec88df2376da8993a53e4792",
          "withoutMetadata": "ca4eb4baa488151552e56e9f6242744b8c95c29522e87180e46bc42cdf7a4e55",
          "linkedWithoutMetadata": "ca4eb4baa488151552e56e9f6242744b8c95c29522e87180e46bc42cdf7a4e55"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "updateOperator",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "DCL",
              "src": "contracts\\dcl\\DCL.sol:5"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dcl/DclDoNFT.sol:DclDoNFT": {
        "src": "contracts\\dcl\\DclDoNFT.sol:8",
        "version": {
          "withMetadata": "846f445d0d9f88abf2262fe428b40f9360dfc5f33b065d9feee9da3842418c43",
          "withoutMetadata": "8d5bb7cd6e53189218ac75e79cb24511e14c164a4b977fb56eb60d4048931040",
          "linkedWithoutMetadata": "8d5bb7cd6e53189218ac75e79cb24511e14c164a4b977fb56eb60d4048931040"
        },
        "inherit": [
          "contracts/VipDoNFT.sol:VipDoNFT",
          "contracts/CheckInMgr.sol:CheckInMgr",
          "contracts/ComplexDoNFT.sol:ComplexDoNFT",
          "contracts/IComplexDoNFT.sol:IComplexDoNFT",
          "contracts/royalty/Royalty.sol:Royalty",
          "contracts/royalty/IRoyalty.sol:IRoyalty",
          "contracts/WrapDoNFT.sol:WrapDoNFT",
          "contracts/IWrapDoNFT.sol:IWrapDoNFT",
          "contracts/BaseDoNFT.sol:BaseDoNFT",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [],
        "methods": [
          "getUser(uint256)"
        ],
        "linkReferences": [
          {
            "src": "contracts/DoubleSVG.sol",
            "name": "DoubleSVG",
            "length": 20,
            "start": 9102,
            "placeholder": "__$996ce4ea27519c2de692a7755c14713365$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "DoubleSVG",
            "src": "contracts/DoubleSVG.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "oNftAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:20"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:21"
            },
            {
              "label": "curDoid",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:22"
            },
            {
              "label": "curDurationId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:23"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint64",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:24"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(DoNftInfo)10455_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:25"
            },
            {
              "label": "durationMapping",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(Duration)10447_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:26"
            },
            {
              "label": "oid2vid",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:27"
            },
            {
              "label": "isOnlyNow",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:28"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:9"
            },
            {
              "label": "beneficiary",
              "offset": 0,
              "slot": "13",
              "type": "t_address_payable",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:10"
            },
            {
              "label": "royaltyAdmin",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:11"
            },
            {
              "label": "tempRoyaltyAdmin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:12"
            },
            {
              "label": "checkInMap",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_uint256,t_struct(CheckInData)8968_storage)",
              "contract": "CheckInMgr",
              "src": "contracts\\CheckInMgr.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(CheckInData)8968_storage)": {
              "label": "mapping(uint256 => struct CheckInMgr.CheckInData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DoNftInfo)10455_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.DoNftInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Duration)10447_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.Duration)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(CheckInData)8968_storage": {
              "label": "struct CheckInMgr.CheckInData",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DoNftInfo)10455_storage": {
              "label": "struct IBaseDoNFT.DoNftInfo",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durationList",
                  "type": "t_struct(UintSet)7237_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Duration)10447_storage": {
              "label": "struct IBaseDoNFT.Duration",
              "members": [
                {
                  "label": "start",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "end",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)6765_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)7237_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)6765_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dcl/IDCL.sol:IDCL": {
        "src": "contracts\\dcl\\IDCL.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setUpdateOperator(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dualRoles/IERC4907.sol:IERC4907": {
        "src": "contracts\\dualRoles\\IERC4907.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setUser(uint256,address,uint64)",
          "userOf(uint256)",
          "userExpires(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dualRoles/wrap/IWrapNFT.sol:IWrapNFT": {
        "src": "contracts\\dualRoles\\wrap\\IWrapNFT.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "originalAddress()",
          "stake(uint256)",
          "redeem(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ens/BaseRegistrar.sol:BaseRegistrar": {
        "src": "contracts\\ens\\BaseRegistrar.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nameExpires(uint256)",
          "reclaim(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ens/ENS.sol:ENS": {
        "src": "contracts\\ens\\ENS.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ens/ENSDoNFT.sol:ENSDoNFT": {
        "src": "contracts\\ens\\ENSDoNFT.sol:9",
        "version": {
          "withMetadata": "a2af99b5c1ae680544a7e0f5e86c8418555f1ebcac2a1288683bdb4568409e8a",
          "withoutMetadata": "4c0bc2f7a8cb9d79fdc8e4675e9ac1e753103c7582de59399ac7a015345eb77e",
          "linkedWithoutMetadata": "4c0bc2f7a8cb9d79fdc8e4675e9ac1e753103c7582de59399ac7a015345eb77e"
        },
        "inherit": [
          "contracts/VipDoNFT.sol:VipDoNFT",
          "contracts/CheckInMgr.sol:CheckInMgr",
          "contracts/ComplexDoNFT.sol:ComplexDoNFT",
          "contracts/IComplexDoNFT.sol:IComplexDoNFT",
          "contracts/royalty/Royalty.sol:Royalty",
          "contracts/royalty/IRoyalty.sol:IRoyalty",
          "contracts/WrapDoNFT.sol:WrapDoNFT",
          "contracts/IWrapDoNFT.sol:IWrapDoNFT",
          "contracts/BaseDoNFT.sol:BaseDoNFT",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "initializeENS(string,string,address,address,address,address,address,address)",
          "mintVNft(uint256)",
          "getUser(uint256)",
          "couldRedeem(uint256,uint256[])"
        ],
        "linkReferences": [
          {
            "src": "contracts/DoubleSVG.sol",
            "name": "DoubleSVG",
            "length": 20,
            "start": 9797,
            "placeholder": "__$996ce4ea27519c2de692a7755c14713365$__"
          }
        ],
        "errors": [
          {
            "kind": "external-library-linking",
            "name": "DoubleSVG",
            "src": "contracts/DoubleSVG.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "oNftAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:20"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:21"
            },
            {
              "label": "curDoid",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:22"
            },
            {
              "label": "curDurationId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:23"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint64",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:24"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(DoNftInfo)10455_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:25"
            },
            {
              "label": "durationMapping",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(Duration)10447_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:26"
            },
            {
              "label": "oid2vid",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:27"
            },
            {
              "label": "isOnlyNow",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:28"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:9"
            },
            {
              "label": "beneficiary",
              "offset": 0,
              "slot": "13",
              "type": "t_address_payable",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:10"
            },
            {
              "label": "royaltyAdmin",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:11"
            },
            {
              "label": "tempRoyaltyAdmin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:12"
            },
            {
              "label": "checkInMap",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_uint256,t_struct(CheckInData)8968_storage)",
              "contract": "CheckInMgr",
              "src": "contracts\\CheckInMgr.sol:16"
            },
            {
              "label": "ens",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(ENS)11380",
              "contract": "ENSDoNFT",
              "src": "contracts\\ens\\ENSDoNFT.sol:12"
            },
            {
              "label": "nameExpires",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_uint64)",
              "contract": "ENSDoNFT",
              "src": "contracts\\ens\\ENSDoNFT.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ENS)11380": {
              "label": "contract ENS",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(CheckInData)8968_storage)": {
              "label": "mapping(uint256 => struct CheckInMgr.CheckInData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DoNftInfo)10455_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.DoNftInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Duration)10447_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.Duration)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint64)": {
              "label": "mapping(uint256 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(CheckInData)8968_storage": {
              "label": "struct CheckInMgr.CheckInData",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DoNftInfo)10455_storage": {
              "label": "struct IBaseDoNFT.DoNftInfo",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durationList",
                  "type": "t_struct(UintSet)7237_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Duration)10447_storage": {
              "label": "struct IBaseDoNFT.Duration",
              "members": [
                {
                  "label": "start",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "end",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)6765_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)7237_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)6765_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/royalty/IRoyalty.sol:IRoyalty": {
        "src": "contracts\\royalty\\IRoyalty.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimRoyaltyAdmin()",
          "setBeneficiary(address payable)",
          "getBeneficiary()",
          "setRoyaltyFee(uint256)",
          "getRoyaltyFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/royalty/Royalty.sol:Royalty": {
        "src": "contracts\\royalty\\Royalty.sol:7",
        "version": {
          "withMetadata": "30c38fe379e06e179f959e607eac2208e6df794e9724e90425e19ec3e8e8eee8",
          "withoutMetadata": "37f6ed278f4a620d73108ea4241d8939ff844f1d3bebdd6b09cd0e3284da8535",
          "linkedWithoutMetadata": "37f6ed278f4a620d73108ea4241d8939ff844f1d3bebdd6b09cd0e3284da8535"
        },
        "inherit": [
          "contracts/royalty/IRoyalty.sol:IRoyalty"
        ],
        "libraries": [],
        "methods": [
          "setTempRoyaltyAdmin(address)",
          "claimRoyaltyAdmin()",
          "setBeneficiary(address payable)",
          "getBeneficiary()",
          "setRoyaltyFee(uint256)",
          "getRoyaltyFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "fee",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:9"
            },
            {
              "label": "beneficiary",
              "offset": 0,
              "slot": "1",
              "type": "t_address_payable",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:10"
            },
            {
              "label": "royaltyAdmin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:11"
            },
            {
              "label": "tempRoyaltyAdmin",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin\\contracts\\access\\Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin\\contracts\\access\\Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin\\contracts\\interfaces\\IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/IERC1967.sol:IERC1967": {
        "src": "@openzeppelin\\contracts\\interfaces\\IERC1967.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin\\contracts\\interfaces\\draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils": {
        "src": "@openzeppelin\\contracts\\proxy\\ERC1967\\ERC1967Utils.sol:15",
        "version": {
          "withMetadata": "d8b659a6f22eab5b4d4399a0eda2c14ff74eff341904239399a8a70eae56bab7",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:97"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/Proxy.sol:Proxy": {
        "src": "@openzeppelin\\contracts\\proxy\\Proxy.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol:BeaconProxy": {
        "src": "@openzeppelin\\contracts\\proxy\\beacon\\BeaconProxy.sol:23",
        "version": {
          "withMetadata": "cbebafa85b99a59724f9a623b3b4ba3faf6b8f4aac0efe2f3536f217cf8e6f8e",
          "withoutMetadata": "78c1a859c05852705dd5bf404c9ce155b35f3e74edd0379f0bc195a7d5b418e4",
          "linkedWithoutMetadata": "78c1a859c05852705dd5bf404c9ce155b35f3e74edd0379f0bc195a7d5b418e4"
        },
        "inherit": [
          "@openzeppelin/contracts/proxy/Proxy.sol:Proxy"
        ],
        "libraries": [
          "@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol:ERC1967Utils"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BeaconProxy",
            "src": "@openzeppelin\\contracts\\proxy\\beacon\\BeaconProxy.sol:39"
          },
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:97"
          },
          {
            "kind": "state-variable-immutable",
            "name": "_beacon",
            "src": "@openzeppelin\\contracts\\proxy\\beacon\\BeaconProxy.sol:25"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/proxy/beacon/IBeacon.sol:IBeacon": {
        "src": "@openzeppelin\\contracts\\proxy\\beacon\\IBeacon.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "implementation()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:29",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:45"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\extensions\\IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin\\contracts\\token\\ERC20\\utils\\SafeERC20.sol:19",
        "version": {
          "withMetadata": "2ed492f6d4a08edc6076a0556ad9592153bebf428ae787921b6875dd00c32fdc",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\extensions\\IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin\\contracts\\token\\ERC721\\utils\\ERC721Utils.sol:16",
        "version": {
          "withMetadata": "7b9bfa201489448d5e7407eb6453100d64bb7feab4875e8f5998d08292f57034",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin\\contracts\\utils\\Address.sol:11",
        "version": {
          "withMetadata": "fb61dda68e7db4786b9723f7df7244eaebc3f3fee7bff01fcf5053e3c6bc7d6f",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Errors.sol:Errors"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin\\contracts\\utils\\Address.sol:97"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin\\contracts\\utils\\Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin\\contracts\\utils\\Errors.sol:14",
        "version": {
          "withMetadata": "f4274fbf3d6c2176ae1e148ca1fd3dfab68a3b73bfcb548e61464f49be6c8d86",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin\\contracts\\utils\\Panic.sol:26",
        "version": {
          "withMetadata": "18af38b215aa82e5b9e190077fe255402503dd79151eff9011a50d73506f48c6",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/StorageSlot.sol:StorageSlot": {
        "src": "@openzeppelin\\contracts\\utils\\StorageSlot.sol:34",
        "version": {
          "withMetadata": "0a220b1eaa74f4801b4218f9511ce9227040f319bc016a31b823b4f741e3f229",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin\\contracts\\utils\\Strings.sol:12",
        "version": {
          "withMetadata": "cbcb8686d4c6e626bbf29ebc6afbef97d3b8bd4409d899afaff5e95be2cef342",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin\\contracts\\utils\\introspection\\IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin\\contracts\\utils\\math\\Math.sol:12",
        "version": {
          "withMetadata": "c1cc1915447ae3d859504c9c92a15b97cbe8e8c30a73f2be9357550d2d5166ca",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SafeCast.sol:19",
        "version": {
          "withMetadata": "a7f1ca3b8aa423805776ae8f808db352566e4239432fa65596841d6263194dd0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin\\contracts\\utils\\math\\SignedMath.sol:11",
        "version": {
          "withMetadata": "8f8d91cf5ee7bf61e273f61af3226f85a57f9f7d7a15676b74d5deda80d82371",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin\\contracts\\utils\\structs\\EnumerableSet.sol:41",
        "version": {
          "withMetadata": "3788d48ee882395847aaa0384ac7623f6d2c9c08b7c9813c12d14380fb1afcd9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/BaseDoNFT.sol:BaseDoNFT": {
        "src": "contracts\\BaseDoNFT.sol:12",
        "inherit": [
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "setIsOnlyNow(bool)",
          "contains(uint256,uint256)",
          "getDurationIdList(uint256)",
          "getDuration(uint256)",
          "getDurationByIndex(uint256,uint256)",
          "isValidNow(uint256)",
          "getDurationListLength(uint256)",
          "getDoNftInfo(uint256)",
          "getNonce(uint256)",
          "mint(uint256,uint256,uint64,uint64,address,address)",
          "setMaxDuration(uint64)",
          "getMaxDuration()",
          "concat(uint256,uint256,uint256,uint256)",
          "checkIn(address,uint256,uint256)",
          "gc(uint256,uint256[])",
          "getFingerprint(uint256)",
          "isVNft(uint256)",
          "getOriginalNftAddress()",
          "getOriginalNftId(uint256)",
          "getVNftId(uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "supportsInterface(bytes4)",
          "exists(uint256)",
          "setMarket(address)",
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\BaseDoNFT.sol:465"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "oNftAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:20"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:21"
            },
            {
              "label": "curDoid",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:22"
            },
            {
              "label": "curDurationId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:23"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint64",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:24"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(DoNftInfo)12897_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:25"
            },
            {
              "label": "durationMapping",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(Duration)12889_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:26"
            },
            {
              "label": "oid2vid",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:27"
            },
            {
              "label": "isOnlyNow",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DoNftInfo)12897_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.DoNftInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Duration)12889_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.Duration)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(DoNftInfo)12897_storage": {
              "label": "struct IBaseDoNFT.DoNftInfo",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durationList",
                  "type": "t_struct(UintSet)9414_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Duration)12889_storage": {
              "label": "struct IBaseDoNFT.Duration",
              "members": [
                {
                  "label": "start",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "end",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)8942_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)9414_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)8942_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/CheckInMgr.sol:CheckInMgr": {
        "src": "contracts\\CheckInMgr.sol:9",
        "version": {
          "withMetadata": "b81eb1271fb41b39eaba16de1111f4ccf2db84a4eda53b81333636b3303eab3b",
          "withoutMetadata": "e16d6bd3c85b9b25c24468bcc4af2dd13a612e8c7d363eee10222c9926bdac4d",
          "linkedWithoutMetadata": "e16d6bd3c85b9b25c24468bcc4af2dd13a612e8c7d363eee10222c9926bdac4d"
        },
        "inherit": [
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [],
        "methods": [
          "resetExpiredTo(uint256[],address)",
          "isCheckInDataExpired(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "checkInMap",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_uint256,t_struct(CheckInData)11143_storage)",
              "contract": "CheckInMgr",
              "src": "contracts\\CheckInMgr.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_struct(CheckInData)11143_storage)": {
              "label": "mapping(uint256 => struct CheckInMgr.CheckInData)",
              "numberOfBytes": "32"
            },
            "t_struct(CheckInData)11143_storage": {
              "label": "struct CheckInMgr.CheckInData",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ComplexDoNFT.sol:ComplexDoNFT": {
        "src": "contracts\\ComplexDoNFT.sol:12",
        "version": {
          "withMetadata": "4de6a3521e2aadc9013dd3c6305288651e400069227edd18c79f1cc6b212408a",
          "withoutMetadata": "f6d99d847a57086b1d606ae0fdbe70010a4b8d0e3ed4edeb867e97b20df11f77",
          "linkedWithoutMetadata": "f6d99d847a57086b1d606ae0fdbe70010a4b8d0e3ed4edeb867e97b20df11f77"
        },
        "inherit": [
          "contracts/IComplexDoNFT.sol:IComplexDoNFT",
          "contracts/royalty/Royalty.sol:Royalty",
          "contracts/royalty/IRoyalty.sol:IRoyalty",
          "contracts/WrapDoNFT.sol:WrapDoNFT",
          "contracts/IWrapDoNFT.sol:IWrapDoNFT",
          "contracts/BaseDoNFT.sol:BaseDoNFT",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/DoubleSVG.sol:DoubleSVG"
        ],
        "methods": [
          "initialize(string,string,address,address,address,address,address)",
          "mintVNft(uint256)",
          "checkIn(address,uint256,uint256)",
          "getUser(uint256)",
          "redeem(uint256,uint256[])",
          "supportsInterface(bytes4)",
          "tokenURI(uint256)"
        ],
        "linkReferences": [
          {
            "src": "contracts/DoubleSVG.sol",
            "name": "DoubleSVG",
            "length": 20,
            "start": 9869,
            "placeholder": "__$996ce4ea27519c2de692a7755c14713365$__"
          }
        ],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\BaseDoNFT.sol:465"
          },
          {
            "kind": "external-library-linking",
            "name": "DoubleSVG",
            "src": "contracts/DoubleSVG.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "oNftAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:20"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:21"
            },
            {
              "label": "curDoid",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:22"
            },
            {
              "label": "curDurationId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:23"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint64",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:24"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(DoNftInfo)12897_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:25"
            },
            {
              "label": "durationMapping",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(Duration)12889_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:26"
            },
            {
              "label": "oid2vid",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:27"
            },
            {
              "label": "isOnlyNow",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:28"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:9"
            },
            {
              "label": "beneficiary",
              "offset": 0,
              "slot": "13",
              "type": "t_address_payable",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:10"
            },
            {
              "label": "royaltyAdmin",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:11"
            },
            {
              "label": "tempRoyaltyAdmin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DoNftInfo)12897_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.DoNftInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Duration)12889_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.Duration)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(DoNftInfo)12897_storage": {
              "label": "struct IBaseDoNFT.DoNftInfo",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durationList",
                  "type": "t_struct(UintSet)9414_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Duration)12889_storage": {
              "label": "struct IBaseDoNFT.Duration",
              "members": [
                {
                  "label": "start",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "end",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)8942_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)9414_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)8942_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/DoNFTFactory.sol:DoNFTFactory": {
        "src": "contracts\\DoNFTFactory.sol:12",
        "version": {
          "withMetadata": "bb4dec831b1e3788d11ba2d60045d15190b856f4a9e57cdf2d73f6732b859571",
          "withoutMetadata": "058f7d9b4a99aa3837d645a1c8df5501480e583315185bc482b58f7115a1fcf2",
          "linkedWithoutMetadata": "058f7d9b4a99aa3837d645a1c8df5501480e583315185bc482b58f7115a1fcf2"
        },
        "inherit": [
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address,address)",
          "setBeaconAndMarket(address,address)",
          "deployDoNFT(string,string,address,address,address,address,string)",
          "deployWrapNFT(string,string,address)",
          "getDoNFT(address,string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DoNFTFactory",
            "src": "contracts\\DoNFTFactory.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_address))",
              "contract": "DoNFTFactory",
              "src": "contracts\\DoNFTFactory.sol:30"
            },
            {
              "label": "beacon",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "DoNFTFactory",
              "src": "contracts\\DoNFTFactory.sol:32"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "DoNFTFactory",
              "src": "contracts\\DoNFTFactory.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_address))": {
              "label": "mapping(address => mapping(string => address))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_string_memory_ptr,t_address)": {
              "label": "mapping(string => address)",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/DoubleSVG.sol:DoubleSVG": {
        "src": "contracts\\DoubleSVG.sol:5",
        "version": {
          "withMetadata": "11954708b329e2245355357c0c16691098edfaf1f97a7b70dc1755c5f57a3555",
          "withoutMetadata": "e8a11402f892062f2412984438929a9c24a0e9db78603fecb2a0fad0ad5b4df6",
          "linkedWithoutMetadata": "e8a11402f892062f2412984438929a9c24a0e9db78603fecb2a0fad0ad5b4df6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "genTokenURI(uint256,string,string,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/IBaseDoNFT.sol:IBaseDoNFT": {
        "src": "contracts\\IBaseDoNFT.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "mintVNft(uint256)",
          "mint(uint256,uint256,uint64,uint64,address,address)",
          "setMaxDuration(uint64)",
          "getMaxDuration()",
          "getDurationIdList(uint256)",
          "getDurationListLength(uint256)",
          "getDoNftInfo(uint256)",
          "getNonce(uint256)",
          "getDuration(uint256)",
          "getDurationByIndex(uint256,uint256)",
          "getVNftId(uint256)",
          "isVNft(uint256)",
          "isValidNow(uint256)",
          "getOriginalNftAddress()",
          "getOriginalNftId(uint256)",
          "checkIn(address,uint256,uint256)",
          "getUser(uint256)",
          "exists(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/IComplexDoNFT.sol:IComplexDoNFT": {
        "src": "contracts\\IComplexDoNFT.sol:7",
        "inherit": [
          "contracts/royalty/IRoyalty.sol:IRoyalty",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "initialize(string,string,address,address,address,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/IDoubleSVG.sol:IDoubleSVG": {
        "src": "contracts\\IDoubleSVG.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "genTokenURI(uint256,string,string,uint64,uint64)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/IWrapDoNFT.sol:IWrapDoNFT": {
        "src": "contracts\\IWrapDoNFT.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "couldRedeem(uint256,uint256[])",
          "redeem(uint256,uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/MiddleWare.sol:IDoNFT": {
        "src": "contracts\\MiddleWare.sol:8",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/IComplexDoNFT.sol:IComplexDoNFT",
          "contracts/royalty/IRoyalty.sol:IRoyalty",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/MiddleWare.sol:MiddleWare": {
        "src": "contracts\\MiddleWare.sol:10",
        "version": {
          "withMetadata": "ac04b410c4188123444443a75c70bf610b554454a02ad124c9e885184900af48",
          "withoutMetadata": "515d227140f9391d234a2b61303c14e3526fa6661e52c8d8603b61d1b0da7aa8",
          "linkedWithoutMetadata": "515d227140f9391d234a2b61303c14e3526fa6661e52c8d8603b61d1b0da7aa8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "getNftOwnerAndUser(address,uint256,address)",
          "getNftOwner(address,uint256)",
          "getNftOwnerAndTokenURI(address,uint256)",
          "getDoNftMarketInfo(address,uint256,address)",
          "batchIsApprovedForAll(address,address[],address[])",
          "batchGetDoNftIdByONftId(address[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/OwnableContract.sol:OwnableContract": {
        "src": "contracts\\OwnableContract.sol:4",
        "version": {
          "withMetadata": "5b6637eb9bc969205a19bb5cc4cb64b4bbd83a3ea63efc05ec6dc5310bff5ef0",
          "withoutMetadata": "f8dc2750ec2665ffeb1a79071ed38abad3c84931c264f33608b3e4f418555c63",
          "linkedWithoutMetadata": "f8dc2750ec2665ffeb1a79071ed38abad3c84931c264f33608b3e4f418555c63"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "transferOwnership(address)",
          "renounceOwnership()",
          "acceptOwner()",
          "setAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/TimeLockMultiSigWallet.sol:Strings": {
        "src": "contracts\\TimeLockMultiSigWallet.sol:4",
        "version": {
          "withMetadata": "4fd6279e0ad156015a58e07e5e2cc7de794e6ef24ce5d4a94619cc9a89ae92c0",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/TimeLockMultiSigWallet.sol:TimeLockMultiSigWallet": {
        "src": "contracts\\TimeLockMultiSigWallet.sol:37",
        "version": {
          "withMetadata": "f495d86a16808fe6fac377b7025e940bdba6b4c75dff47d6b217c09bc6c6d41c",
          "withoutMetadata": "4b81dcd81ae483b008321189d76001b95bbeb6149355f1b5efd1c82960d3e375",
          "linkedWithoutMetadata": "4b81dcd81ae483b008321189d76001b95bbeb6149355f1b5efd1c82960d3e375"
        },
        "inherit": [],
        "libraries": [
          "contracts/TimeLockMultiSigWallet.sol:Strings"
        ],
        "methods": [
          "()",
          "()",
          "(address[],uint256,uint256)",
          "addOwner(address)",
          "removeOwner(address)",
          "replaceOwner(address,address)",
          "changeRequirement(uint256)",
          "submitTransaction(address,uint256,bytes)",
          "batchConfirmTransaction(uint256[])",
          "confirmTransaction(uint256)",
          "revokeConfirmation(uint256)",
          "batchExecuteTransaction(uint256[])",
          "executeTransaction(uint256)",
          "isConfirmed(uint256)",
          "getConfirmationCount(uint256)",
          "getTransactionCount(bool,bool)",
          "getOwners()",
          "getConfirmations(uint256)",
          "getTransactionIds(uint256,uint256,bool,bool)",
          "setDelay(uint256)",
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TimeLockMultiSigWallet",
            "src": "contracts\\TimeLockMultiSigWallet.sol:146"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "delay",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "TimeLockMultiSigWallet",
              "src": "contracts\\TimeLockMultiSigWallet.sol:57"
            },
            {
              "label": "transactions",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_uint256,t_struct(Transaction)14067_storage)",
              "contract": "TimeLockMultiSigWallet",
              "src": "contracts\\TimeLockMultiSigWallet.sol:61"
            },
            {
              "label": "confirmations",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))",
              "contract": "TimeLockMultiSigWallet",
              "src": "contracts\\TimeLockMultiSigWallet.sol:62"
            },
            {
              "label": "isOwner",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "TimeLockMultiSigWallet",
              "src": "contracts\\TimeLockMultiSigWallet.sol:63"
            },
            {
              "label": "owners",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "TimeLockMultiSigWallet",
              "src": "contracts\\TimeLockMultiSigWallet.sol:64"
            },
            {
              "label": "required",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "TimeLockMultiSigWallet",
              "src": "contracts\\TimeLockMultiSigWallet.sol:65"
            },
            {
              "label": "transactionCount",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "TimeLockMultiSigWallet",
              "src": "contracts\\TimeLockMultiSigWallet.sol:66"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes_storage": {
              "label": "bytes",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
              "label": "mapping(uint256 => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Transaction)14067_storage)": {
              "label": "mapping(uint256 => struct TimeLockMultiSigWallet.Transaction)",
              "numberOfBytes": "32"
            },
            "t_struct(Transaction)14067_storage": {
              "label": "struct TimeLockMultiSigWallet.Transaction",
              "members": [
                {
                  "label": "destination",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "value",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "data",
                  "type": "t_bytes_storage",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "executed",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "submitTime",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/VipDoNFT.sol:VipDoNFT": {
        "src": "contracts\\VipDoNFT.sol:8",
        "inherit": [
          "contracts/CheckInMgr.sol:CheckInMgr",
          "contracts/ComplexDoNFT.sol:ComplexDoNFT",
          "contracts/IComplexDoNFT.sol:IComplexDoNFT",
          "contracts/royalty/Royalty.sol:Royalty",
          "contracts/royalty/IRoyalty.sol:IRoyalty",
          "contracts/WrapDoNFT.sol:WrapDoNFT",
          "contracts/IWrapDoNFT.sol:IWrapDoNFT",
          "contracts/BaseDoNFT.sol:BaseDoNFT",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [],
        "methods": [
          "mintVNft(uint256)",
          "checkIn(address,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\BaseDoNFT.sol:465"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "oNftAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:20"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:21"
            },
            {
              "label": "curDoid",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:22"
            },
            {
              "label": "curDurationId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:23"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint64",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:24"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(DoNftInfo)12897_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:25"
            },
            {
              "label": "durationMapping",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(Duration)12889_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:26"
            },
            {
              "label": "oid2vid",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:27"
            },
            {
              "label": "isOnlyNow",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:28"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:9"
            },
            {
              "label": "beneficiary",
              "offset": 0,
              "slot": "13",
              "type": "t_address_payable",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:10"
            },
            {
              "label": "royaltyAdmin",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:11"
            },
            {
              "label": "tempRoyaltyAdmin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:12"
            },
            {
              "label": "checkInMap",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_uint256,t_struct(CheckInData)11143_storage)",
              "contract": "CheckInMgr",
              "src": "contracts\\CheckInMgr.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(CheckInData)11143_storage)": {
              "label": "mapping(uint256 => struct CheckInMgr.CheckInData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DoNftInfo)12897_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.DoNftInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Duration)12889_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.Duration)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(CheckInData)11143_storage": {
              "label": "struct CheckInMgr.CheckInData",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DoNftInfo)12897_storage": {
              "label": "struct IBaseDoNFT.DoNftInfo",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durationList",
                  "type": "t_struct(UintSet)9414_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Duration)12889_storage": {
              "label": "struct IBaseDoNFT.Duration",
              "members": [
                {
                  "label": "start",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "end",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)8942_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)9414_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)8942_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/WrapDoNFT.sol:WrapDoNFT": {
        "src": "contracts\\WrapDoNFT.sol:8",
        "inherit": [
          "contracts/IWrapDoNFT.sol:IWrapDoNFT",
          "contracts/BaseDoNFT.sol:BaseDoNFT",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "couldRedeem(uint256,uint256[])",
          "redeem(uint256,uint256[])"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\BaseDoNFT.sol:465"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "oNftAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:20"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:21"
            },
            {
              "label": "curDoid",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:22"
            },
            {
              "label": "curDurationId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:23"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint64",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:24"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(DoNftInfo)12897_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:25"
            },
            {
              "label": "durationMapping",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(Duration)12889_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:26"
            },
            {
              "label": "oid2vid",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:27"
            },
            {
              "label": "isOnlyNow",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:28"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DoNftInfo)12897_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.DoNftInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Duration)12889_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.Duration)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(DoNftInfo)12897_storage": {
              "label": "struct IBaseDoNFT.DoNftInfo",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durationList",
                  "type": "t_struct(UintSet)9414_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Duration)12889_storage": {
              "label": "struct IBaseDoNFT.Duration",
              "members": [
                {
                  "label": "start",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "end",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)8942_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)9414_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)8942_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dcl/DCL.sol:DCL": {
        "src": "contracts\\dcl\\DCL.sol:4",
        "version": {
          "withMetadata": "c7243f45c0a8cdee85d79f26b1f24bbecf9e6bc2ec88df2376da8993a53e4792",
          "withoutMetadata": "ca4eb4baa488151552e56e9f6242744b8c95c29522e87180e46bc42cdf7a4e55",
          "linkedWithoutMetadata": "ca4eb4baa488151552e56e9f6242744b8c95c29522e87180e46bc42cdf7a4e55"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "updateOperator",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "DCL",
              "src": "contracts\\dcl\\DCL.sol:5"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dcl/DclDoNFT.sol:DclDoNFT": {
        "src": "contracts\\dcl\\DclDoNFT.sol:8",
        "version": {
          "withMetadata": "0d2d18517d22c6335ea57257e5c229581bd7b9cd08a82c8aed2582ef027376eb",
          "withoutMetadata": "b13f4599de1e128223808eb5c7c1e59d3e39fe7d9bdbd5dd8abe2f9730ca4894",
          "linkedWithoutMetadata": "b13f4599de1e128223808eb5c7c1e59d3e39fe7d9bdbd5dd8abe2f9730ca4894"
        },
        "inherit": [
          "contracts/VipDoNFT.sol:VipDoNFT",
          "contracts/CheckInMgr.sol:CheckInMgr",
          "contracts/ComplexDoNFT.sol:ComplexDoNFT",
          "contracts/IComplexDoNFT.sol:IComplexDoNFT",
          "contracts/royalty/Royalty.sol:Royalty",
          "contracts/royalty/IRoyalty.sol:IRoyalty",
          "contracts/WrapDoNFT.sol:WrapDoNFT",
          "contracts/IWrapDoNFT.sol:IWrapDoNFT",
          "contracts/BaseDoNFT.sol:BaseDoNFT",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [],
        "methods": [
          "getUser(uint256)"
        ],
        "linkReferences": [
          {
            "src": "contracts/DoubleSVG.sol",
            "name": "DoubleSVG",
            "length": 20,
            "start": 9037,
            "placeholder": "__$996ce4ea27519c2de692a7755c14713365$__"
          }
        ],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\BaseDoNFT.sol:465"
          },
          {
            "kind": "external-library-linking",
            "name": "DoubleSVG",
            "src": "contracts/DoubleSVG.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "oNftAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:20"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:21"
            },
            {
              "label": "curDoid",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:22"
            },
            {
              "label": "curDurationId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:23"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint64",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:24"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(DoNftInfo)12897_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:25"
            },
            {
              "label": "durationMapping",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(Duration)12889_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:26"
            },
            {
              "label": "oid2vid",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:27"
            },
            {
              "label": "isOnlyNow",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:28"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:9"
            },
            {
              "label": "beneficiary",
              "offset": 0,
              "slot": "13",
              "type": "t_address_payable",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:10"
            },
            {
              "label": "royaltyAdmin",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:11"
            },
            {
              "label": "tempRoyaltyAdmin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:12"
            },
            {
              "label": "checkInMap",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_uint256,t_struct(CheckInData)11143_storage)",
              "contract": "CheckInMgr",
              "src": "contracts\\CheckInMgr.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(CheckInData)11143_storage)": {
              "label": "mapping(uint256 => struct CheckInMgr.CheckInData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DoNftInfo)12897_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.DoNftInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Duration)12889_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.Duration)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(CheckInData)11143_storage": {
              "label": "struct CheckInMgr.CheckInData",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DoNftInfo)12897_storage": {
              "label": "struct IBaseDoNFT.DoNftInfo",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durationList",
                  "type": "t_struct(UintSet)9414_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Duration)12889_storage": {
              "label": "struct IBaseDoNFT.Duration",
              "members": [
                {
                  "label": "start",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "end",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)8942_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)9414_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)8942_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dcl/IDCL.sol:IDCL": {
        "src": "contracts\\dcl\\IDCL.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setUpdateOperator(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dualRoles/ERC4907.sol:ERC4907": {
        "src": "contracts\\dualRoles\\ERC4907.sol:7",
        "version": {
          "withMetadata": "b706784f2d5de17aea405ada33a759f5b8ecab5adace0eb1e16ab8eab9359793",
          "withoutMetadata": "f0256aa21030f4b2129b3b284ede0aa1f77ca3f82d8d77c5068db2b1cece5218",
          "linkedWithoutMetadata": "f0256aa21030f4b2129b3b284ede0aa1f77ca3f82d8d77c5068db2b1cece5218"
        },
        "inherit": [
          "contracts/dualRoles/IERC4907.sol:IERC4907",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "setUser(uint256,address,uint64)",
          "userOf(uint256)",
          "userExpires(uint256)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC4907",
            "src": "contracts\\dualRoles\\ERC4907.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:34"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(UserInfo)15581_storage)",
              "contract": "ERC4907",
              "src": "contracts\\dualRoles\\ERC4907.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(UserInfo)15581_storage)": {
              "label": "mapping(uint256 => struct ERC4907.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(UserInfo)15581_storage": {
              "label": "struct ERC4907.UserInfo",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "expires",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dualRoles/IERC4907.sol:IERC4907": {
        "src": "contracts\\dualRoles\\IERC4907.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setUser(uint256,address,uint64)",
          "userOf(uint256)",
          "userExpires(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dualRoles/wrap/IWrapNFT.sol:IWrapNFT": {
        "src": "contracts\\dualRoles\\wrap\\IWrapNFT.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver"
        ],
        "libraries": [],
        "methods": [
          "originalAddress()",
          "stake(uint256)",
          "redeem(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/dualRoles/wrap/WrapERC721DualRole.sol:WrapERC721DualRole": {
        "src": "contracts\\dualRoles\\wrap\\WrapERC721DualRole.sol:7",
        "version": {
          "withMetadata": "b3c1c21cecf9af1157918689dd385bad9f71e3b71f8f4e2c4e9b3f15afea9f3a",
          "withoutMetadata": "76fe1bd3c0c4a8c4f5522cfe782a3aceb89c225126ca0eaa219f05d4ffb986ab",
          "linkedWithoutMetadata": "76fe1bd3c0c4a8c4f5522cfe782a3aceb89c225126ca0eaa219f05d4ffb986ab"
        },
        "inherit": [
          "contracts/dualRoles/wrap/IWrapNFT.sol:IWrapNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "contracts/dualRoles/ERC4907.sol:ERC4907",
          "contracts/dualRoles/IERC4907.sol:IERC4907",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,address)",
          "originalAddress()",
          "stake(uint256)",
          "redeem(uint256)",
          "originalOwnerOf(uint256)",
          "tokenURI(uint256)",
          "onERC721Received(address,address,uint256,bytes)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "WrapERC721DualRole",
            "src": "contracts\\dualRoles\\wrap\\WrapERC721DualRole.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:34"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(UserInfo)15581_storage)",
              "contract": "ERC4907",
              "src": "contracts\\dualRoles\\ERC4907.sol:13"
            },
            {
              "label": "_originalAddress",
              "offset": 0,
              "slot": "7",
              "type": "t_address",
              "contract": "WrapERC721DualRole",
              "src": "contracts\\dualRoles\\wrap\\WrapERC721DualRole.sol:8"
            },
            {
              "label": "_doNFTAddress",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "WrapERC721DualRole",
              "src": "contracts\\dualRoles\\wrap\\WrapERC721DualRole.sol:10"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(UserInfo)15581_storage)": {
              "label": "mapping(uint256 => struct ERC4907.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(UserInfo)15581_storage": {
              "label": "struct ERC4907.UserInfo",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "expires",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ens/BaseRegistrar.sol:BaseRegistrar": {
        "src": "contracts\\ens\\BaseRegistrar.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "nameExpires(uint256)",
          "reclaim(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ens/ENS.sol:ENS": {
        "src": "contracts\\ens\\ENS.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "owner(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/ens/ENSDoNFT.sol:ENSDoNFT": {
        "src": "contracts\\ens\\ENSDoNFT.sol:9",
        "version": {
          "withMetadata": "3c7b267bb7237546b04a26874a139efa965e06b416fe719154c296edc9c9ec99",
          "withoutMetadata": "83f77f7aa8aa1bb3515fade107259252725c174985312b974ba97e14be3bd937",
          "linkedWithoutMetadata": "83f77f7aa8aa1bb3515fade107259252725c174985312b974ba97e14be3bd937"
        },
        "inherit": [
          "contracts/VipDoNFT.sol:VipDoNFT",
          "contracts/CheckInMgr.sol:CheckInMgr",
          "contracts/ComplexDoNFT.sol:ComplexDoNFT",
          "contracts/IComplexDoNFT.sol:IComplexDoNFT",
          "contracts/royalty/Royalty.sol:Royalty",
          "contracts/royalty/IRoyalty.sol:IRoyalty",
          "contracts/WrapDoNFT.sol:WrapDoNFT",
          "contracts/IWrapDoNFT.sol:IWrapDoNFT",
          "contracts/BaseDoNFT.sol:BaseDoNFT",
          "contracts/IBaseDoNFT.sol:IBaseDoNFT",
          "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [
          "initializeENS(string,string,address,address,address,address,address,address)",
          "mintVNft(uint256)",
          "getUser(uint256)",
          "couldRedeem(uint256,uint256[])"
        ],
        "linkReferences": [
          {
            "src": "contracts/DoubleSVG.sol",
            "name": "DoubleSVG",
            "length": 20,
            "start": 9732,
            "placeholder": "__$996ce4ea27519c2de692a7755c14713365$__"
          }
        ],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts\\BaseDoNFT.sol:465"
          },
          {
            "kind": "external-library-linking",
            "name": "DoubleSVG",
            "src": "contracts/DoubleSVG.sol"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "oNftAddress",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:20"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:21"
            },
            {
              "label": "curDoid",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:22"
            },
            {
              "label": "curDurationId",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:23"
            },
            {
              "label": "maxDuration",
              "offset": 0,
              "slot": "7",
              "type": "t_uint64",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:24"
            },
            {
              "label": "doNftMapping",
              "offset": 0,
              "slot": "8",
              "type": "t_mapping(t_uint256,t_struct(DoNftInfo)12897_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:25"
            },
            {
              "label": "durationMapping",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_struct(Duration)12889_storage)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:26"
            },
            {
              "label": "oid2vid",
              "offset": 0,
              "slot": "10",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:27"
            },
            {
              "label": "isOnlyNow",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "BaseDoNFT",
              "src": "contracts\\BaseDoNFT.sol:28"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:9"
            },
            {
              "label": "beneficiary",
              "offset": 0,
              "slot": "13",
              "type": "t_address_payable",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:10"
            },
            {
              "label": "royaltyAdmin",
              "offset": 0,
              "slot": "14",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:11"
            },
            {
              "label": "tempRoyaltyAdmin",
              "offset": 0,
              "slot": "15",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:12"
            },
            {
              "label": "checkInMap",
              "offset": 0,
              "slot": "16",
              "type": "t_mapping(t_uint256,t_struct(CheckInData)11143_storage)",
              "contract": "CheckInMgr",
              "src": "contracts\\CheckInMgr.sol:16"
            },
            {
              "label": "ens",
              "offset": 0,
              "slot": "17",
              "type": "t_contract(ENS)16209",
              "contract": "ENSDoNFT",
              "src": "contracts\\ens\\ENSDoNFT.sol:12"
            },
            {
              "label": "nameExpires",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_uint256,t_uint64)",
              "contract": "ENSDoNFT",
              "src": "contracts\\ens\\ENSDoNFT.sol:13"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(ERC721Storage)121_storage": {
              "label": "struct ERC721Upgradeable.ERC721Storage",
              "members": [
                {
                  "label": "_name",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_symbol",
                  "type": "t_string_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "_owners",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "_balances",
                  "type": "t_mapping(t_address,t_uint256)",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "_tokenApprovals",
                  "type": "t_mapping(t_uint256,t_address)",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "_operatorApprovals",
                  "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                  "offset": 0,
                  "slot": "5"
                }
              ],
              "numberOfBytes": "192"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(ENS)16209": {
              "label": "contract ENS",
              "numberOfBytes": "20"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(CheckInData)11143_storage)": {
              "label": "mapping(uint256 => struct CheckInMgr.CheckInData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(DoNftInfo)12897_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.DoNftInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Duration)12889_storage)": {
              "label": "mapping(uint256 => struct IBaseDoNFT.Duration)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint64)": {
              "label": "mapping(uint256 => uint64)",
              "numberOfBytes": "32"
            },
            "t_struct(CheckInData)11143_storage": {
              "label": "struct CheckInMgr.CheckInData",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "expiredAt",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DoNftInfo)12897_storage": {
              "label": "struct IBaseDoNFT.DoNftInfo",
              "members": [
                {
                  "label": "oid",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "durationList",
                  "type": "t_struct(UintSet)9414_storage",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(Duration)12889_storage": {
              "label": "struct IBaseDoNFT.Duration",
              "members": [
                {
                  "label": "start",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "end",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(Set)8942_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_positions",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(UintSet)9414_storage": {
              "label": "struct EnumerableSet.UintSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)8942_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:27",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:30",
                "offset": 0,
                "slot": "1"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:32",
                "offset": 0,
                "slot": "2"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34",
                "offset": 0,
                "slot": "3"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:36",
                "offset": 0,
                "slot": "4"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:38",
                "offset": 0,
                "slot": "5"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/market/IMarket.sol:IMarket": {
        "src": "contracts\\market\\IMarket.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintAndCreateLendOrder(address,uint256,uint64,uint64,uint256,address)",
          "createLendOrder(address,uint256,uint64,uint64,uint256,address)",
          "cancelLendOrder(address,uint256)",
          "getLendOrder(address,uint256)",
          "getRenterOfPrivateLendOrder(address,uint256)",
          "getPaymentNormal(address,uint256)",
          "fulfillOrderNow(address,uint256,uint256,uint64,address)",
          "setFee(uint256)",
          "getFee()",
          "setMarketBeneficiary(address payable)",
          "claimFee(address[])",
          "claimRoyalty(address,address[])",
          "isLendOrderValid(address,uint256)",
          "setPause(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/market/Market.sol:Market": {
        "src": "contracts\\market\\Market.sol:13",
        "version": {
          "withMetadata": "400281a51f80cafee65436401ec16eaeb68d2118049546a03eac2d7038450279",
          "withoutMetadata": "f33dfd331a21b16c0bfcd5a1dae80d1ee6ed5f8aa4c3a6390526eeb9be80376d",
          "linkedWithoutMetadata": "f33dfd331a21b16c0bfcd5a1dae80d1ee6ed5f8aa4c3a6390526eeb9be80376d"
        },
        "inherit": [
          "contracts/market/IMarket.sol:IMarket",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/OwnableContract.sol:OwnableContract"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [
          "initialize(address,address)",
          "mintAndCreateLendOrder(address,uint256,uint64,uint64,uint256,address)",
          "mintAndCreatePrivateLendOrder(address,uint256,uint64,uint64,uint256,address,address,uint8)",
          "createLendOrder(address,uint256,uint64,uint64,uint256,address)",
          "createPrivateLendOrder(address,uint256,uint64,uint64,uint256,address,address,uint8)",
          "cancelLendOrder(address,uint256)",
          "getLendOrder(address,uint256)",
          "getRenterOfPrivateLendOrder(address,uint256)",
          "getPaymentNormal(address,uint256)",
          "fulfillOrderNow(address,uint256,uint256,uint64,address)",
          "setFee(uint256)",
          "getFee()",
          "setMarketBeneficiary(address payable)",
          "claimFee(address[])",
          "balanceOfRoyalty(address,address)",
          "claimRoyalty(address,address[])",
          "isLendOrderValid(address,uint256)",
          "setPause(bool)",
          "setMaxIndate(uint64)",
          "multicall(bytes[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:5"
            },
            {
              "label": "pendingOwner",
              "offset": 0,
              "slot": "1",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:6"
            },
            {
              "label": "admin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "OwnableContract",
              "src": "contracts\\OwnableContract.sol:7"
            },
            {
              "label": "lendingMap",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Lending)16590_storage))",
              "contract": "Market",
              "src": "contracts\\market\\Market.sol:15"
            },
            {
              "label": "privateOrderMap",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
              "contract": "Market",
              "src": "contracts\\market\\Market.sol:16"
            },
            {
              "label": "paymentNormalMap",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(PaymentNormal)16595_storage))",
              "contract": "Market",
              "src": "contracts\\market\\Market.sol:17"
            },
            {
              "label": "royaltyMap",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "Market",
              "src": "contracts\\market\\Market.sol:19"
            },
            {
              "label": "balanceOfFee",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Market",
              "src": "contracts\\market\\Market.sol:20"
            },
            {
              "label": "beneficiary",
              "offset": 0,
              "slot": "8",
              "type": "t_address_payable",
              "contract": "Market",
              "src": "contracts\\market\\Market.sol:21"
            },
            {
              "label": "fee",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts\\market\\Market.sol:22"
            },
            {
              "label": "maxIndate",
              "offset": 0,
              "slot": "10",
              "type": "t_uint64",
              "contract": "Market",
              "src": "contracts\\market\\Market.sol:23"
            },
            {
              "label": "isPausing",
              "offset": 8,
              "slot": "10",
              "type": "t_bool",
              "contract": "Market",
              "src": "contracts\\market\\Market.sol:24"
            },
            {
              "label": "supportERC20",
              "offset": 9,
              "slot": "10",
              "type": "t_bool",
              "contract": "Market",
              "src": "contracts\\market\\Market.sol:25"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_struct(InitializableStorage)10_storage": {
              "label": "struct Initializable.InitializableStorage",
              "members": [
                {
                  "label": "_initialized",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_initializing",
                  "type": "t_bool",
                  "offset": 8,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_struct(ReentrancyGuardStorage)476_storage": {
              "label": "struct ReentrancyGuardUpgradeable.ReentrancyGuardStorage",
              "members": [
                {
                  "label": "_status",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_enum(OrderType)16567": {
              "label": "enum IMarket.OrderType",
              "members": [
                "Public",
                "Private",
                "Event_Private"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(PaymentType)16569": {
              "label": "enum IMarket.PaymentType",
              "members": [
                "Normal"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
              "label": "mapping(address => mapping(uint256 => address))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(Lending)16590_storage))": {
              "label": "mapping(address => mapping(uint256 => struct IMarket.Lending))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_struct(PaymentNormal)16595_storage))": {
              "label": "mapping(address => mapping(uint256 => struct IMarket.PaymentNormal))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(Lending)16590_storage)": {
              "label": "mapping(uint256 => struct IMarket.Lending)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(PaymentNormal)16595_storage)": {
              "label": "mapping(uint256 => struct IMarket.PaymentNormal)",
              "numberOfBytes": "32"
            },
            "t_struct(Lending)16590_storage": {
              "label": "struct IMarket.Lending",
              "members": [
                {
                  "label": "lender",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nftAddress",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "nftId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "maxEndTime",
                  "type": "t_uint64",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "minDuration",
                  "type": "t_uint64",
                  "offset": 8,
                  "slot": "3"
                },
                {
                  "label": "createTime",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "nonce",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                },
                {
                  "label": "orderType",
                  "type": "t_enum(OrderType)16567",
                  "offset": 0,
                  "slot": "4"
                },
                {
                  "label": "paymentType",
                  "type": "t_enum(PaymentType)16569",
                  "offset": 1,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(PaymentNormal)16595_storage": {
              "label": "struct IMarket.PaymentNormal",
              "members": [
                {
                  "label": "token",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "pricePerDay",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin\\contracts-upgradeable\\utils\\ReentrancyGuardUpgradeable.sol:43",
                "offset": 0,
                "slot": "0"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:69",
                "offset": 0,
                "slot": "0"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:73",
                "offset": 8,
                "slot": "0"
              }
            ]
          }
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/BasicMockNFT.sol:BasicMockNFT": {
        "src": "contracts\\mocks\\BasicMockNFT.sol:7",
        "version": {
          "withMetadata": "9d7ff2b6eba6654fcb4c110d4c21343c1046346d7cbb69b2c664d4858e687c3f",
          "withoutMetadata": "ffcdf5de351867a8e095ea4e6f09c044bc37f75fcb2eea611391f130d132710c",
          "linkedWithoutMetadata": "ffcdf5de351867a8e095ea4e6f09c044bc37f75fcb2eea611391f130d132710c"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BasicMockNFT",
            "src": "contracts\\mocks\\BasicMockNFT.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:34"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            },
            {
              "label": "_nextTokenId",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "BasicMockNFT",
              "src": "contracts\\mocks\\BasicMockNFT.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockERC20.sol:MockERC20": {
        "src": "contracts\\mocks\\MockERC20.sol:6",
        "version": {
          "withMetadata": "7d8b7ee4cd4d2d8314cc251980f509cedc95b19569ead95f644d32ecd9f77f91",
          "withoutMetadata": "493c40d48d8fa5f9b46240df56a90b693cb1073ddab651c3fa89409f4d6c7c9d",
          "linkedWithoutMetadata": "493c40d48d8fa5f9b46240df56a90b693cb1073ddab651c3fa89409f4d6c7c9d"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockERC20",
            "src": "contracts\\mocks\\MockERC20.sol:7"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:30"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:32"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:34"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:36"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin\\contracts\\token\\ERC20\\ERC20.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockNFT.sol:IERC4907": {
        "src": "contracts\\mocks\\MockNFT.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setUser(uint256,address,uint64)",
          "userOf(uint256)",
          "userExpires(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/mocks/MockNFT.sol:MockNFT": {
        "src": "contracts\\mocks\\MockNFT.sol:30",
        "version": {
          "withMetadata": "5c52630ec6557c3243f9c2746ef36980699d591f3774805656d56eddb40f5c49",
          "withoutMetadata": "740482d242051353fb6ce150218ee37f2267519cc8b32a74cdd5d5fe30d3bd6b",
          "linkedWithoutMetadata": "740482d242051353fb6ce150218ee37f2267519cc8b32a74cdd5d5fe30d3bd6b"
        },
        "inherit": [
          "contracts/mocks/MockNFT.sol:IERC4907",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address)",
          "setUser(uint256,address,uint64)",
          "userOf(uint256)",
          "userExpires(uint256)",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MockNFT",
            "src": "contracts\\mocks\\MockNFT.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin\\contracts\\token\\ERC721\\ERC721.sol:34"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin\\contracts\\access\\Ownable.sol:21"
            },
            {
              "label": "_users",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_struct(UserInfo)18366_storage)",
              "contract": "MockNFT",
              "src": "contracts\\mocks\\MockNFT.sol:36"
            },
            {
              "label": "_nextTokenId",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MockNFT",
              "src": "contracts\\mocks\\MockNFT.sol:37"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(UserInfo)18366_storage)": {
              "label": "mapping(uint256 => struct MockNFT.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(UserInfo)18366_storage": {
              "label": "struct MockNFT.UserInfo",
              "members": [
                {
                  "label": "user",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "expires",
                  "type": "t_uint64",
                  "offset": 20,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/royalty/IRoyalty.sol:IRoyalty": {
        "src": "contracts\\royalty\\IRoyalty.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "claimRoyaltyAdmin()",
          "setBeneficiary(address payable)",
          "getBeneficiary()",
          "setRoyaltyFee(uint256)",
          "getRoyaltyFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      },
      "contracts/royalty/Royalty.sol:Royalty": {
        "src": "contracts\\royalty\\Royalty.sol:7",
        "version": {
          "withMetadata": "30c38fe379e06e179f959e607eac2208e6df794e9724e90425e19ec3e8e8eee8",
          "withoutMetadata": "37f6ed278f4a620d73108ea4241d8939ff844f1d3bebdd6b09cd0e3284da8535",
          "linkedWithoutMetadata": "37f6ed278f4a620d73108ea4241d8939ff844f1d3bebdd6b09cd0e3284da8535"
        },
        "inherit": [
          "contracts/royalty/IRoyalty.sol:IRoyalty"
        ],
        "libraries": [],
        "methods": [
          "setTempRoyaltyAdmin(address)",
          "claimRoyaltyAdmin()",
          "setBeneficiary(address payable)",
          "getBeneficiary()",
          "setRoyaltyFee(uint256)",
          "getRoyaltyFee()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "fee",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:9"
            },
            {
              "label": "beneficiary",
              "offset": 0,
              "slot": "1",
              "type": "t_address_payable",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:10"
            },
            {
              "label": "royaltyAdmin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:11"
            },
            {
              "label": "tempRoyaltyAdmin",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Royalty",
              "src": "contracts\\royalty\\Royalty.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_address_payable": {
              "label": "address payable",
              "numberOfBytes": "20"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.28"
      }
    }
  ]
}